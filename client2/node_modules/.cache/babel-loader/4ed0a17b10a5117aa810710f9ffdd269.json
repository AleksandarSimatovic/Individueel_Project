{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var username = \"destinationFinder\";\n      this.setState({\n        userName: username\n      });\n      var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n      this.componentDidMountCurrentLocation(url);\n      url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n      this.componentDidMountCity(url);\n      console.log(\"lat: \" + this.state.lat);\n      console.log(\"homelat: \" + this.state.homeLat);\n      ReactDOM.render(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.state.city), document.getElementById('cityName'));\n\n      if (this.state.isTemperature) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, \"Asked for temperature\"), document.getElementById('temperature'));\n        ReactDOM.render(React.createElement(FetchTemperature, {\n          oldState: this.state,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }), document.getElementById('temperatureInfo'));\n        console.log(\"lat and lng: \" + this.state.lat + this.state.lng); //ReactDOM.render(< this.getTemperature />, document.getElementById('temperatureInfo'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \":\", this.calculateDistance(this.state.homeLat, this.state.homeLng, this.state.lat, this.state.lng), \" km\"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      } //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n\n    };\n\n    this.state = {\n      currentLocation: \"De Bilt\",\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false\n    };\n  }\n\n  componentDidMountCurrentLocation(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: \"\",\n      homeLat: cityData.geonames[0].lat,\n      homeLng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Current city: \", this.state.currentLocation), document.getElementById('currentCity'))));\n  }\n\n  componentDidMountCity(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: cityData.geonames[0].countryName,\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Country: \", this.state.country), document.getElementById('countryName')), ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Lat: \", this.state.lat, \", Lng: \", this.state.lng), document.getElementById('latlng'))));\n  }\n\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    let radius = 6371;\n    let dLat = this.deg2rad(lat2 - lat1); // deg2rad below\n\n    let dLon = this.deg2rad(lon2 - lon1);\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let distance = radius * c;\n    return distance;\n  } //    getTemperature = () => {\n  //        var returnData;\n  //        console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n  //        const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng +  \"&username=destinationFinder\";\n  //        console.log(url);\n  //        fetch(url)\n  //        .then(res => res.json())\n  //        .then(data => {\n  //            console.log(\"data: \");\n  //            console.log(data);\n  //            returnData = data;\n  //        })\n  //        .catch(console.log);\n  //        render(){\n  //            return\n  //            <div>\n  //                return returnData;\n  //            </div>\n  //        }\n  //\n  //    }\n\n\n  deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"De Bilt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"De Bilt\"), React.createElement(\"option\", {\n      value: \"Manchester\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Manchester\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Get Info\"));\n  }\n\n}\n\nReactDOM.render(React.createElement(InformationSelector, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 158\n  },\n  __self: this\n}), document.getElementById('selectInformationTypes'));\n\nclass FetchTemperature extends InformationSelector {\n  constructor(props) {\n    super(props);\n    console.log(\"props lat: \");\n    console.log(this.props.lat);\n    this.state = {\n      url: \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + props.lat + \"&lng=\" + props.lng + \"&username=destinationFinder\"\n    };\n    console.log(this.state); //    console.log(props.oldState);\n  }\n\n  async componentDidMount() {\n    const url = this.state.url;\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      clouds: data.clouds,\n      temperature: data.temperature,\n      windSpeed: data.windSpeed\n    });\n    console.log(\"state: \");\n    console.log(data);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"clouds: \", this.state.clouds, \", temperature: \", this.state.temperature, \", windSpeed: \", this.state.windSpeed));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/index.js"],"names":["React","ReactDOM","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","onSubmit","preventDefault","username","userName","url","state","currentLocation","componentDidMountCurrentLocation","componentDidMountCity","console","log","lat","homeLat","render","document","getElementById","lng","calculateDistance","homeLng","fetch","then","res","json","cityData","country","geonames","countryName","lat1","lon1","lat2","lon2","radius","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","distance","deg","PI","name","FetchTemperature","componentDidMount","response","data","clouds","temperature","windSpeed"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nclass InformationSelector extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentLocation: \"De Bilt\",\n            homeLat: \"\",\n            homeLng: \"\",\n            city: \"De Bilt\",\n            isTemperature: false,\n            isDistance: false\n        };\n    }\n    onChangeTemperature = () => {\n        this.setState(initialState => ({\n            isTemperature: !initialState.isTemperature,\n        }));\n    }\n    onChangeDistance = () => {\n        this.setState(initialState => ({\n            isDistance: !initialState.isDistance,\n        }));\n    }\n\n    onChangeCity = (e) => {\n        const citySelected = e.target.value;\n        this.setState({city: citySelected});\n    }\n\n    componentDidMountCurrentLocation(url) {\n            fetch(url)\n            .then(res => res.json())\n            .then(cityData => this.setState({country: \"\",\n                homeLat: cityData.geonames[0].lat, homeLng: cityData.geonames[0].lng}, () =>\n                ReactDOM.render(<p>Current city: {this.state.currentLocation}</p>, document.getElementById('currentCity')),\n            ));\n        }\n\n    componentDidMountCity(url) {\n        fetch(url)\n        .then(res => res.json())\n        .then(cityData => this.setState({country: cityData.geonames[0].countryName,\n            lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\n            ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')),\n            ReactDOM.render(<p>Lat: {this.state.lat}, Lng: {this.state.lng}</p>, document.getElementById('latlng'))\n        ));\n    }\n\n    calculateDistance(lat1, lon1, lat2, lon2){\n        let radius = 6371;\n        let dLat = this.deg2rad(lat2-lat1);  // deg2rad below\n        let dLon = this.deg2rad(lon2-lon1);\n        let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n            Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *\n            Math.sin(dLon/2) * Math.sin(dLon/2);\n        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        let distance = radius * c;\n        return distance;\n    }\n\n//    getTemperature = () => {\n//        var returnData;\n//        console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n//        const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng +  \"&username=destinationFinder\";\n//        console.log(url);\n//        fetch(url)\n//        .then(res => res.json())\n//        .then(data => {\n//            console.log(\"data: \");\n//            console.log(data);\n//            returnData = data;\n//        })\n//        .catch(console.log);\n//        render(){\n//            return\n//            <div>\n//                return returnData;\n//            </div>\n//        }\n//\n//    }\n\n   deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n\n    onSubmit = (e) => {\n\n        e.preventDefault();\n        var username = \"destinationFinder\"\n        this.setState({userName: username});\n        var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n        this.componentDidMountCurrentLocation(url);\n\n        url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n        this.componentDidMountCity(url);\n\n        console.log(\"lat: \" + this.state.lat);\n        console.log(\"homelat: \" + this.state.homeLat);\n        ReactDOM.render(<p>{this.state.city}</p>, document.getElementById('cityName'));\n        if (this.state.isTemperature){\n            ReactDOM.render(<p>Asked for temperature</p>, document.getElementById('temperature'));\n            ReactDOM.render(<FetchTemperature oldState={this.state} />, document.getElementById('temperatureInfo'));\n            console.log(\"lat and lng: \" + this.state.lat + this.state.lng);\n            //ReactDOM.render(< this.getTemperature />, document.getElementById('temperatureInfo'));\n        }\n        else{\n            ReactDOM.render(\"\", document.getElementById('temperature'));\n        }\n        if (this.state.isDistance){\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}:\n            {this.calculateDistance(this.state.homeLat, this.state.homeLng,\n                                    this.state.lat, this.state.lng)} km</p>, document.getElementById('distance'));\n        }\n        else {\n            ReactDOM.render(\"\", document.getElementById('distance'));\n        }\n        //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n    }\n    render() {\n        return (\n         <form onSubmit={this.onSubmit}>\n              <select onChange={this.onChangeCity}>\n                <option value=\"De Bilt\">De Bilt</option>\n                <option value=\"Manchester\">Manchester</option>\n              </select>\n              <p>\n                <label>\n                  Temperature\n                  <input\n                    name=\"Temperature\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeTemperature}/>\n                </label>\n                <label>\n                  Distance\n                  <input\n                    name=\"Distance\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeDistance}/>\n                </label>\n              </p>\n              <button>\n                Get Info\n              </button>\n          </form>\n        );\n    }\n}\n\nReactDOM.render(<InformationSelector />, document.getElementById('selectInformationTypes'));\n\nclass FetchTemperature extends InformationSelector{\n    constructor(props) {\n        super(props);\n        console.log(\"props lat: \");\n        console.log(this.props.lat);\n        this.state = {\n            url: \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + props.lat + \"&lng=\" + props.lng +  \"&username=destinationFinder\",\n        };\n    console.log(this.state);\n//    console.log(props.oldState);\n    }\n\n    async componentDidMount(){\n        const url = this.state.url;\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({clouds: data.clouds, temperature: data.temperature, windSpeed: data.windSpeed})\n        console.log(\"state: \");\n        console.log(data);\n    }\n\n    render(){\n         return <div>\n             {<div>\n                 clouds: {this.state.clouds},\n                 temperature: {this.state.temperature},\n                 windSpeed: {this.state.windSpeed}\n             </div>}\n\n         </div>;\n     }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}