{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\SearchByCity.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport calculateDistance from './util';\nimport axios from 'axios';\nconst home = \"De Bilt\";\nvar cityFound = true;\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.getTemperature = () => {\n      axios.post('http://localhost:3000/temperature/getTemperature', {\n        cityName: this.state.city\n      }).then(res => {\n        console.log(res.data);\n        this.setState({\n          temperature: res.data.toFixed(0)\n        });\n      }); //return <div>Temperature: {this.state.temperature} degrees Celcius</div>;\n\n      ReactDOM.render(React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Temperature: \", this.state.temperature, \" degrees Celcius\"), document.getElementById('temperature'));\n    };\n\n    this.getCityInfoTypes = () => {\n      if (this.state.isTemperature) {\n        //ReactDOM.render(< this.getTemperature />, document.getElementById('temperature'));\n        this.getTemperature();\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \":\", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, \"\\xA0\"), calculateDistance(this.state.homeLat, this.state.homeLng, this.state.lat, this.state.lng), \" km\"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      }\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      this.getCurrentLocation(); //this.getCityInfo();\n\n      if (cityFound === true) {\n        this.getCityInfoTypes();\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \"City: \", this.state.city), document.getElementById('cityName'));\n      }\n\n      console.log(this.state);\n    };\n\n    this.state = {\n      currentLocation: home,\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false,\n      lat: \"\",\n      lng: \"\"\n    };\n  }\n\n  getCurrentLocation() {\n    axios.post('http://localhost:3000/location/getCurrentLocation', {\n      cityName: this.state.currentLocation\n    }).then(res => {\n      this.setState({\n        country: \"\",\n        homeLat: res.data.geonames[0].lat,\n        homeLng: res.data.geonames[0].lng\n      }, this.getCityInfo());\n    });\n  }\n\n  getCityInfo() {\n    axios.post('http://localhost:3000/location/getCityInfo', {\n      cityName: this.state.city\n    }).then(res => {\n      if (res.data.geonames.length > 0) {\n        cityFound = true;\n        this.setState({\n          country: res.data.geonames[0].countryName,\n          lat: res.data.geonames[0].lat,\n          lng: res.data.geonames[0].lng\n        }, () => ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"Country: \", this.state.country), document.getElementById('countryName')));\n      } else {\n        cityFound = false;\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, \"City not found\"), document.getElementById('cityName'));\n        ReactDOM.render(\"\", document.getElementById('countryName'));\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"formCitySearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Choose a city and the information you wish to see\"), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Get Info\")), React.createElement(\"div\", {\n      id: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"searchInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"SearchByCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"currentCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"selectInformationTypes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"cityName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"countryName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"latlng\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"temperature\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"temperatureInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default InformationSelector;","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/SearchByCity.js"],"names":["React","ReactDOM","calculateDistance","axios","home","cityFound","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","getTemperature","post","cityName","state","then","res","console","log","data","temperature","toFixed","render","document","getElementById","getCityInfoTypes","currentLocation","homeLat","homeLng","lat","lng","onSubmit","preventDefault","getCurrentLocation","country","geonames","getCityInfo","length","countryName","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport calculateDistance from './util'\r\nimport axios from 'axios';\r\n\r\n\r\nconst home = \"De Bilt\";\r\nvar cityFound = true;\r\n\r\nclass InformationSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentLocation: home,\r\n            homeLat: \"\",\r\n            homeLng: \"\",\r\n            city: \"De Bilt\",\r\n            isTemperature: false,\r\n            isDistance: false,\r\n            lat: \"\",\r\n            lng: \"\"\r\n        };\r\n    }\r\n    onChangeTemperature = () => {\r\n        this.setState(initialState => ({\r\n            isTemperature: !initialState.isTemperature,\r\n        }));\r\n    }\r\n    onChangeDistance = () => {\r\n        this.setState(initialState => ({\r\n            isDistance: !initialState.isDistance,\r\n        }));\r\n    }\r\n    onChangeCity = (e) => {\r\n        const citySelected = e.target.value;\r\n        this.setState({city: citySelected});\r\n    }\r\n\r\n    getCurrentLocation() {\r\n        axios.post('http://localhost:3000/location/getCurrentLocation', {\r\n            cityName: this.state.currentLocation\r\n        })\r\n        .then((res) => {\r\n            this.setState({country: \"\",\r\n                homeLat: res.data.geonames[0].lat,\r\n                homeLng: res.data.geonames[0].lng\r\n            }, this.getCityInfo());\r\n        })\r\n    }\r\n\r\n    getCityInfo() {\r\n        axios.post('http://localhost:3000/location/getCityInfo', {\r\n            cityName: this.state.city\r\n        })\r\n        .then((res) => {\r\n            if(res.data.geonames.length>0){\r\n                cityFound = true;\r\n                this.setState({\r\n                    country: res.data.geonames[0].countryName,\r\n                    lat: res.data.geonames[0].lat, lng: res.data.geonames[0].lng\r\n                }, () => ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')))\r\n            }\r\n            else {\r\n                cityFound = false;\r\n                ReactDOM.render(<p>City not found</p>, document.getElementById('cityName'));\r\n                ReactDOM.render(\"\", document.getElementById('countryName'));\r\n                ReactDOM.render(\"\", document.getElementById('temperature'));\r\n                ReactDOM.render(\"\", document.getElementById('distance'));\r\n            }\r\n        })\r\n    }\r\n\r\n    getTemperature = () => {\r\n        axios.post('http://localhost:3000/temperature/getTemperature', {\r\n            cityName: this.state.city\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            this.setState({temperature: res.data.toFixed(0) });\r\n        })\r\n        //return <div>Temperature: {this.state.temperature} degrees Celcius</div>;\r\n        ReactDOM.render(<div>Temperature: {this.state.temperature} degrees Celcius</div>, document.getElementById('temperature'));\r\n    }\r\n\r\n    getCityInfoTypes = () => {\r\n        if (this.state.isTemperature){\r\n            //ReactDOM.render(< this.getTemperature />, document.getElementById('temperature'));\r\n            this.getTemperature()\r\n        }\r\n        else{\r\n            ReactDOM.render(\"\", document.getElementById('temperature'));\r\n        }\r\n        if (this.state.isDistance){\r\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}:<span>&nbsp;</span>\r\n             {calculateDistance(this.state.homeLat, this.state.homeLng,\r\n                                    this.state.lat, this.state.lng)} km</p>, document.getElementById('distance'));\r\n        }\r\n        else {\r\n            ReactDOM.render(\"\", document.getElementById('distance'));\r\n        }\r\n    }\r\n\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.getCurrentLocation();\r\n        //this.getCityInfo();\r\n        if(cityFound === true) {\r\n            this.getCityInfoTypes();\r\n            ReactDOM.render(<p>City: {this.state.city}</p>, document.getElementById('cityName'));\r\n        }\r\n        console.log(this.state);\r\n    }\r\n    render() {\r\n        return (\r\n        <div id=\"formCitySearch\">\r\n         <form onSubmit={this.onSubmit}>\r\n              <h1>Choose a city and the information you wish to see</h1>\r\n              <input type='text' onChange={this.onChangeCity} />\r\n                <p>\r\n                <label>\r\n                  Temperature\r\n                  <input\r\n                    name=\"Temperature\"\r\n                    type=\"checkbox\"\r\n                    checked={this.state.name}\r\n                    onChange={this.onChangeTemperature}/>\r\n                </label>\r\n                <label>\r\n                  Distance\r\n                  <input\r\n                    name=\"Distance\"\r\n                    type=\"checkbox\"\r\n                    checked={this.state.name}\r\n                    onChange={this.onChangeDistance}/>\r\n                </label>\r\n              </p>\r\n              <button>\r\n                Get Info\r\n              </button>\r\n\r\n          </form>\r\n          <div id=\"wrapper\">\r\n              <div id=\"searchInfo\"></div>\r\n              <div id=\"SearchByCity\">\r\n                <div id=\"currentCity\"></div>\r\n                <div id=\"selectInformationTypes\"></div>\r\n                <div id=\"cityName\"></div>\r\n                <div id=\"countryName\"></div>\r\n                <div id=\"latlng\"></div>\r\n                <div id=\"temperature\"></div>\r\n                <div id=\"distance\"></div>\r\n                <div id=\"temperatureInfo\"></div>\r\n              </div>\r\n          </div>\r\n       </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default InformationSelector"]},"metadata":{},"sourceType":"module"}