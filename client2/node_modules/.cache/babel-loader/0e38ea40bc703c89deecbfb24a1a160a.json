{"ast":null,"code":"module.exports = {\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    let radius = 6371;\n    let dLat = (lat2 - lat1) * (Math.PI / 180);\n    let dLon = (lon2 - lon1) * (Math.PI / 180);\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let distance = radius * c;\n    return distance.toFixed(1);\n  }\n\n}; //export default calculateDistance;","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/util.js"],"names":["module","exports","calculateDistance","lat1","lon1","lat2","lon2","radius","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","distance","toFixed"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AAEjBC,EAAAA,iBAAiB,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAAwB;AACrC,QAAIC,MAAM,GAAG,IAAb;AACA,QAAIC,IAAI,GAAG,CAACH,IAAI,GAACF,IAAN,KAAeM,IAAI,CAACC,EAAL,GAAQ,GAAvB,CAAX;AACA,QAAIC,IAAI,GAAG,CAACL,IAAI,GAACF,IAAN,KAAeK,IAAI,CAACC,EAAL,GAAQ,GAAvB,CAAX;AACA,QAAIE,CAAC,GAAGH,IAAI,CAACI,GAAL,CAASL,IAAI,GAAC,CAAd,IAAmBC,IAAI,CAACI,GAAL,CAASL,IAAI,GAAC,CAAd,CAAnB,GACJC,IAAI,CAACK,GAAL,CAAUX,IAAD,IAAQM,IAAI,CAACC,EAAL,GAAQ,GAAhB,CAAT,IAAiCD,IAAI,CAACK,GAAL,CAAUT,IAAD,IAAQI,IAAI,CAACC,EAAL,GAAQ,GAAhB,CAAT,CAAjC,GACAD,IAAI,CAACI,GAAL,CAASF,IAAI,GAAC,CAAd,CADA,GACmBF,IAAI,CAACI,GAAL,CAASF,IAAI,GAAC,CAAd,CAFvB;AAGA,QAAII,CAAC,GAAG,IAAIN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,IAAL,CAAUL,CAAV,CAAX,EAAyBH,IAAI,CAACQ,IAAL,CAAU,IAAEL,CAAZ,CAAzB,CAAZ;AACA,QAAIM,QAAQ,GAAGX,MAAM,GAAGQ,CAAxB;AACA,WAAOG,QAAQ,CAACC,OAAT,CAAiB,CAAjB,CAAP;AACH;;AAZgB,CAAjB,C,CAiBA","sourcesContent":["module.exports = {\r\n\r\ncalculateDistance(lat1, lon1, lat2, lon2){\r\n    let radius = 6371;\r\n    let dLat = (lat2-lat1) * (Math.PI/180);\r\n    let dLon = (lon2-lon1) * (Math.PI/180);\r\n    let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n        Math.cos((lat1)*(Math.PI/180)) * Math.cos((lat2)*(Math.PI/180)) *\r\n        Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    let distance = radius * c;\r\n    return distance.toFixed(1);\r\n},\r\n\r\n\r\n\r\n}\r\n//export default calculateDistance;"]},"metadata":{},"sourceType":"module"}