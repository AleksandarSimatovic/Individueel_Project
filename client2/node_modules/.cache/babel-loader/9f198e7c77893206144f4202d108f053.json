{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\SearchByCity.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport calculateDistance from './util';\nimport axios from 'axios';\nconst home = \"De Bilt\";\nvar cityFound = true;\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.getTemperature = () => {\n      axios.post('http://localhost:3000/temperature/getTemperature', {\n        cityName: this.state.city\n      }).then(res => {\n        this.setState({\n          temperature: res.data.toFixed(0)\n        }, () => ReactDOM.render(React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \"Temperature: \", this.state.temperature, \" degrees Celcius\"), document.getElementById('temperature')));\n      });\n    };\n\n    this.getDistance = () => {\n      ReactDOM.render(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \":\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"\\xA0\"), calculateDistance(this.state.homeLat, this.state.homeLng, this.state.lat, this.state.lng), \" km\"), document.getElementById('distance'));\n    };\n\n    this.getCityInfoTypes = () => {\n      if (this.state.isTemperature) {\n        this.getTemperature();\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        this.getDistance();\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      }\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      this.getCurrentLocation(); //this.getCityInfo();\n\n      if (cityFound === true) {\n        this.getCityInfoTypes();\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"City: \", this.state.city), document.getElementById('cityName'));\n      }\n\n      console.log(this.state);\n    };\n\n    this.state = {\n      currentLocation: home,\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false,\n      lat: \"\",\n      lng: \"\"\n    };\n  }\n\n  getCurrentLocation() {\n    axios.post('http://localhost:3000/location/getCurrentLocation', {\n      cityName: this.state.currentLocation\n    }).then(res => {\n      this.setState({\n        country: \"\",\n        homeLat: res.data.geonames[0].lat,\n        homeLng: res.data.geonames[0].lng\n      }, this.getCityInfo());\n    });\n  }\n\n  getCityInfo() {\n    axios.post('http://localhost:3000/location/getCityInfo', {\n      cityName: this.state.city\n    }).then(res => {\n      if (res.data.geonames.length > 0) {\n        cityFound = true;\n        this.setState({\n          country: res.data.geonames[0].countryName,\n          lat: res.data.geonames[0].lat,\n          lng: res.data.geonames[0].lng\n        }, () => ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"Country: \", this.state.country), document.getElementById('countryName')));\n      } else {\n        cityFound = false;\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, \"City not found\"), document.getElementById('cityName'));\n        ReactDOM.render(\"\", document.getElementById('countryName'));\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"formCitySearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Choose a city and the information you wish to see\"), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Get Info\")), React.createElement(\"div\", {\n      id: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"searchInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"SearchByCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"currentCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"selectInformationTypes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"cityName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"countryName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"latlng\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"temperature\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"temperatureInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default InformationSelector;","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/SearchByCity.js"],"names":["React","ReactDOM","calculateDistance","axios","home","cityFound","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","getTemperature","post","cityName","state","then","res","temperature","data","toFixed","render","document","getElementById","getDistance","currentLocation","homeLat","homeLng","lat","lng","getCityInfoTypes","onSubmit","preventDefault","getCurrentLocation","console","log","country","geonames","getCityInfo","length","countryName","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport calculateDistance from './util'\r\nimport axios from 'axios';\r\n\r\n\r\nconst home = \"De Bilt\";\r\nvar cityFound = true;\r\n\r\nclass InformationSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentLocation: home,\r\n            homeLat: \"\",\r\n            homeLng: \"\",\r\n            city: \"De Bilt\",\r\n            isTemperature: false,\r\n            isDistance: false,\r\n            lat: \"\",\r\n            lng: \"\"\r\n        };\r\n    }\r\n    onChangeTemperature = () => {\r\n        this.setState(initialState => ({\r\n            isTemperature: !initialState.isTemperature,\r\n        }));\r\n    }\r\n    onChangeDistance = () => {\r\n        this.setState(initialState => ({\r\n            isDistance: !initialState.isDistance,\r\n        }));\r\n    }\r\n    onChangeCity = (e) => {\r\n        const citySelected = e.target.value;\r\n        this.setState({city: citySelected});\r\n    }\r\n\r\n    getCurrentLocation() {\r\n        axios.post('http://localhost:3000/location/getCurrentLocation', {\r\n            cityName: this.state.currentLocation\r\n        })\r\n        .then((res) => {\r\n            this.setState({country: \"\",\r\n                homeLat: res.data.geonames[0].lat,\r\n                homeLng: res.data.geonames[0].lng\r\n            }, this.getCityInfo());\r\n        })\r\n    }\r\n\r\n    getCityInfo() {\r\n        axios.post('http://localhost:3000/location/getCityInfo', {\r\n            cityName: this.state.city\r\n        })\r\n        .then((res) => {\r\n            if(res.data.geonames.length>0){\r\n                cityFound = true;\r\n                this.setState({\r\n                    country: res.data.geonames[0].countryName,\r\n                    lat: res.data.geonames[0].lat, lng: res.data.geonames[0].lng\r\n                }, () => ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')))\r\n            }\r\n            else {\r\n                cityFound = false;\r\n                ReactDOM.render(<p>City not found</p>, document.getElementById('cityName'));\r\n                ReactDOM.render(\"\", document.getElementById('countryName'));\r\n                ReactDOM.render(\"\", document.getElementById('temperature'));\r\n                ReactDOM.render(\"\", document.getElementById('distance'));\r\n            }\r\n        })\r\n    }\r\n\r\n    getTemperature = () => {\r\n        axios.post('http://localhost:3000/temperature/getTemperature', {\r\n            cityName: this.state.city\r\n        })\r\n        .then((res) => {\r\n            this.setState({temperature: res.data.toFixed(0) },\r\n            () => ReactDOM.render(<div>Temperature: {this.state.temperature} degrees Celcius</div>,\r\n            document.getElementById('temperature')));\r\n        })\r\n    }\r\n\r\n    getDistance = () => {\r\n        ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}:<span>&nbsp;</span>\r\n                     {calculateDistance(this.state.homeLat, this.state.homeLng,\r\n                                            this.state.lat, this.state.lng)} km</p>, document.getElementById('distance'));\r\n    }\r\n\r\n    getCityInfoTypes = () => {\r\n        if (this.state.isTemperature){\r\n            this.getTemperature()\r\n        }\r\n        else{\r\n            ReactDOM.render(\"\", document.getElementById('temperature'));\r\n        }\r\n        if (this.state.isDistance){\r\n            this.getDistance()\r\n        }\r\n        else {\r\n            ReactDOM.render(\"\", document.getElementById('distance'));\r\n        }\r\n    }\r\n\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.getCurrentLocation();\r\n        //this.getCityInfo();\r\n        if(cityFound === true) {\r\n            this.getCityInfoTypes();\r\n            ReactDOM.render(<p>City: {this.state.city}</p>, document.getElementById('cityName'));\r\n        }\r\n        console.log(this.state);\r\n    }\r\n    render() {\r\n        return (\r\n        <div id=\"formCitySearch\">\r\n         <form onSubmit={this.onSubmit}>\r\n              <h1>Choose a city and the information you wish to see</h1>\r\n              <input type='text' onChange={this.onChangeCity} />\r\n                <p>\r\n                <label>\r\n                  Temperature\r\n                  <input\r\n                    name=\"Temperature\"\r\n                    type=\"checkbox\"\r\n                    checked={this.state.name}\r\n                    onChange={this.onChangeTemperature}/>\r\n                </label>\r\n                <label>\r\n                  Distance\r\n                  <input\r\n                    name=\"Distance\"\r\n                    type=\"checkbox\"\r\n                    checked={this.state.name}\r\n                    onChange={this.onChangeDistance}/>\r\n                </label>\r\n              </p>\r\n              <button>\r\n                Get Info\r\n              </button>\r\n\r\n          </form>\r\n          <div id=\"wrapper\">\r\n              <div id=\"searchInfo\"></div>\r\n              <div id=\"SearchByCity\">\r\n                <div id=\"currentCity\"></div>\r\n                <div id=\"selectInformationTypes\"></div>\r\n                <div id=\"cityName\"></div>\r\n                <div id=\"countryName\"></div>\r\n                <div id=\"latlng\"></div>\r\n                <div id=\"temperature\"></div>\r\n                <div id=\"distance\"></div>\r\n                <div id=\"temperatureInfo\"></div>\r\n              </div>\r\n          </div>\r\n       </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default InformationSelector"]},"metadata":{},"sourceType":"module"}