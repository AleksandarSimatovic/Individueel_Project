{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=DestinationFinder\";\n      this.componentDidMountCity(url);\n      ReactDOM.render(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.state.city), document.getElementById('cityName'));\n\n      if (this.state.isTemperature) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"Asked for temperature\"), document.getElementById('temperature'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \": \"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      } //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n\n    };\n\n    this.state = {\n      currentLocation: \"De Bilt\",\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false\n    };\n  }\n\n  componentDidMountCurrentLocation(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: \"\",\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Current city: \", this.state.currentLocation), document.getElementById('currentCity'))));\n  }\n\n  componentDidMountCity(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: cityData.geonames[0].countryName,\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Country: \", this.state.country), document.getElementById('countryName')), ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Lat: \", this.state.lat, \", Lng: \", this.state.lng), document.getElementById('latlng'))));\n  }\n\n  render() {\n    var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=DestinationFinder\";\n    this.componentDidMountCurrentLocation(url);\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"De Bilt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"De Bilt\"), React.createElement(\"option\", {\n      value: \"Manchester\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Manchester\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Get Info\"));\n  }\n\n}\n\nReactDOM.render(React.createElement(InformationSelector, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111\n  },\n  __self: this\n}), document.getElementById('selectInformationTypes')); //class FetchCity extends InformationSelector{\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            loading: true,\n//            url: \"http://api.geonames.org/searchJSON?name_equals=\" + props.oldState.city + \"&username=DestinationFinder\",\n//            lat: \"\",\n//            lng: \"\",\n//        };\n////    console.log(this.state);\n////    console.log(props.oldState);\n//    }\n//\n//    async componentDidMount(){\n//        const url = this.state.url;\n//        const response = await fetch(url);\n//        const data = await response.json();\n//        this.setState({lat: data.geonames[1].lat, lng: data.geonames[1].lng, country: data.geonames[1].countryName})\n////        console.log(data.geonames[0]);\n////        console.log(this.state);\n//    }\n//\n//    render(){\n//        return <div>\n//            {<div>{this.state.city}\n//                country: {this.state.country},\n//                lat: {this.state.lat},\n//                lng: {this.state.lng}\n//            </div>}\n//\n//        </div>;\n//    }\n//}\n//class FetchTemperature extends FetchCity {\n//    constructor(props) {\n//        super(props);\n//\n//    }\n//\n//    render(){\n//            return <div>\n//                ddfjsnvkjdsnfv\n//            </div>;\n//        }\n//\n//}","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/index.js"],"names":["React","ReactDOM","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","onSubmit","preventDefault","url","state","componentDidMountCity","render","document","getElementById","currentLocation","homeLat","homeLng","componentDidMountCurrentLocation","fetch","then","res","json","cityData","country","lat","geonames","lng","countryName","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAGA,MAAMC,mBAAN,SAAkCF,KAAK,CAACG,SAAxC,CAAkD;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAWnBC,mBAXmB,GAWG,MAAM;AACxB,WAAKC,QAAL,CAAcC,YAAY,KAAK;AAC3BC,QAAAA,aAAa,EAAE,CAACD,YAAY,CAACC;AADF,OAAL,CAA1B;AAGH,KAfkB;;AAAA,SAgBnBC,gBAhBmB,GAgBA,MAAM;AACrB,WAAKH,QAAL,CAAcC,YAAY,KAAK;AAC3BG,QAAAA,UAAU,EAAE,CAACH,YAAY,CAACG;AADC,OAAL,CAA1B;AAGH,KApBkB;;AAAA,SAsBnBC,YAtBmB,GAsBHC,CAAD,IAAO;AAClB,YAAMC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA9B;AACA,WAAKT,QAAL,CAAc;AAACU,QAAAA,IAAI,EAAEH;AAAP,OAAd;AACH,KAzBkB;;AAAA,SA8CnBI,QA9CmB,GA8CPL,CAAD,IAAO;AACdA,MAAAA,CAAC,CAACM,cAAF;AAEA,UAAIC,GAAG,GAAG,oDAAoD,KAAKC,KAAL,CAAWJ,IAA/D,GAAsE,6BAAhF;AACA,WAAKK,qBAAL,CAA2BF,GAA3B;AAGAnB,MAAAA,QAAQ,CAACsB,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKF,KAAL,CAAWJ,IAAf,CAAhB,EAA0CO,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA1C;;AACA,UAAI,KAAKJ,KAAL,CAAWZ,aAAf,EAA6B;AACzBR,QAAAA,QAAQ,CAACsB,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAhB,EAA8CC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAA9C;AACH,OAFD,MAGI;AACAxB,QAAAA,QAAQ,CAACsB,MAAT,CAAgB,EAAhB,EAAoBC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAApB;AACH;;AACD,UAAI,KAAKJ,KAAL,CAAWV,UAAf,EAA0B;AACtBV,QAAAA,QAAQ,CAACsB,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAkB,KAAKF,KAAL,CAAWK,eAA7B,UAAkD,KAAKL,KAAL,CAAWJ,IAA7D,OAAhB,EAA0FO,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA1F;AACH,OAFD,MAGK;AACDxB,QAAAA,QAAQ,CAACsB,MAAT,CAAgB,EAAhB,EAAoBC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAApB;AACH,OAnBa,CAoBd;;AACH,KAnEkB;;AAEf,SAAKJ,KAAL,GAAa;AACTK,MAAAA,eAAe,EAAE,SADR;AAETC,MAAAA,OAAO,EAAE,EAFA;AAGTC,MAAAA,OAAO,EAAE,EAHA;AAITX,MAAAA,IAAI,EAAE,SAJG;AAKTR,MAAAA,aAAa,EAAE,KALN;AAMTE,MAAAA,UAAU,EAAE;AANH,KAAb;AAQH;;AAiBDkB,EAAAA,gCAAgC,CAACT,GAAD,EAAM;AAC9BU,IAAAA,KAAK,CAACV,GAAD,CAAL,CACKW,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,QAAQ,IAAI,KAAK3B,QAAL,CAAc;AAAC4B,MAAAA,OAAO,EAAE,EAAV;AAC5BC,MAAAA,GAAG,EAAEF,QAAQ,CAACG,QAAT,CAAkB,CAAlB,EAAqBD,GADE;AACGE,MAAAA,GAAG,EAAEJ,QAAQ,CAACG,QAAT,CAAkB,CAAlB,EAAqBC;AAD7B,KAAd,EACiD,MAC/DrC,QAAQ,CAACsB,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkB,KAAKF,KAAL,CAAWK,eAA7B,CAAhB,EAAmEF,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAnE,CAFc,CAFtB;AAMH;;AAELH,EAAAA,qBAAqB,CAACF,GAAD,EAAM;AACvBU,IAAAA,KAAK,CAACV,GAAD,CAAL,CACKW,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,QAAQ,IAAI,KAAK3B,QAAL,CAAc;AAAC4B,MAAAA,OAAO,EAAED,QAAQ,CAACG,QAAT,CAAkB,CAAlB,EAAqBE,WAA/B;AAC5BH,MAAAA,GAAG,EAAEF,QAAQ,CAACG,QAAT,CAAkB,CAAlB,EAAqBD,GADE;AACGE,MAAAA,GAAG,EAAEJ,QAAQ,CAACG,QAAT,CAAkB,CAAlB,EAAqBC;AAD7B,KAAd,EACiD,MAC/DrC,QAAQ,CAACsB,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAa,KAAKF,KAAL,CAAWc,OAAxB,CAAhB,EAAsDX,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAtD,CAFc,EAGdxB,QAAQ,CAACsB,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAS,KAAKF,KAAL,CAAWe,GAApB,aAAgC,KAAKf,KAAL,CAAWiB,GAA3C,CAAhB,EAAqEd,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAArE,CAHc,CAFtB;AAOH;;AAwBDF,EAAAA,MAAM,GAAG;AAET,QAAIH,GAAG,GAAG,oDAAoD,KAAKC,KAAL,CAAWK,eAA/D,GAAiF,6BAA3F;AACQ,SAAKG,gCAAL,CAAsCT,GAAtC;AACJ,WAEC;AAAM,MAAA,QAAQ,EAAE,KAAKF,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAQ,MAAA,QAAQ,EAAE,KAAKN,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAQ,MAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADL,EAKK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,OAAO,EAAE,KAAKS,KAAL,CAAWmB,IAHtB;AAIE,MAAA,QAAQ,EAAE,KAAKlC,mBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,OAAO,EAAE,KAAKe,KAAL,CAAWmB,IAHtB;AAIE,MAAA,QAAQ,EAAE,KAAK9B,gBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CATF,CALL,EAuBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAvBL,CAFD;AA8BH;;AAvG6C;;AA0GlDT,QAAQ,CAACsB,MAAT,CAAgB,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyCC,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CAAzC,E,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nclass InformationSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentLocation: \"De Bilt\",\n            homeLat: \"\",\n            homeLng: \"\",\n            city: \"De Bilt\",\n            isTemperature: false,\n            isDistance: false\n        };\n    }\n    onChangeTemperature = () => {\n        this.setState(initialState => ({\n            isTemperature: !initialState.isTemperature,\n        }));\n    }\n    onChangeDistance = () => {\n        this.setState(initialState => ({\n            isDistance: !initialState.isDistance,\n        }));\n    }\n\n    onChangeCity = (e) => {\n        const citySelected = e.target.value;\n        this.setState({city: citySelected});\n    }\n\n    componentDidMountCurrentLocation(url) {\n            fetch(url)\n                .then(res => res.json())\n                .then(cityData => this.setState({country: \"\",\n                    lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\n                    ReactDOM.render(<p>Current city: {this.state.currentLocation}</p>, document.getElementById('currentCity')),\n                    ));\n        }\n\n    componentDidMountCity(url) {\n        fetch(url)\n            .then(res => res.json())\n            .then(cityData => this.setState({country: cityData.geonames[0].countryName,\n                lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\n                ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')),\n                ReactDOM.render(<p>Lat: {this.state.lat}, Lng: {this.state.lng}</p>, document.getElementById('latlng'))\n                ));\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=DestinationFinder\";\n        this.componentDidMountCity(url);\n\n\n        ReactDOM.render(<p>{this.state.city}</p>, document.getElementById('cityName'));\n        if (this.state.isTemperature){\n            ReactDOM.render(<p>Asked for temperature</p>, document.getElementById('temperature'));\n        }\n        else{\n            ReactDOM.render(\"\", document.getElementById('temperature'));\n        }\n        if (this.state.isDistance){\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}: </p>, document.getElementById('distance'));\n        }\n        else {\n            ReactDOM.render(\"\", document.getElementById('distance'));\n        }\n        //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n    }\n    render() {\n\n    var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=DestinationFinder\";\n            this.componentDidMountCurrentLocation(url);\n        return (\n\n         <form onSubmit={this.onSubmit}>\n              <select onChange={this.onChangeCity}>\n                <option value=\"De Bilt\">De Bilt</option>\n                <option value=\"Manchester\">Manchester</option>\n              </select>\n              <p>\n                <label>\n                  Temperature\n                  <input\n                    name=\"Temperature\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeTemperature}/>\n                </label>\n                <label>\n                  Distance\n                  <input\n                    name=\"Distance\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeDistance}/>\n                </label>\n              </p>\n              <button>\n                Get Info\n              </button>\n          </form>\n        );\n    }\n}\n\nReactDOM.render(<InformationSelector />, document.getElementById('selectInformationTypes'));\n\n\n\n//class FetchCity extends InformationSelector{\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            loading: true,\n//            url: \"http://api.geonames.org/searchJSON?name_equals=\" + props.oldState.city + \"&username=DestinationFinder\",\n//            lat: \"\",\n//            lng: \"\",\n//        };\n////    console.log(this.state);\n////    console.log(props.oldState);\n//    }\n//\n//    async componentDidMount(){\n//        const url = this.state.url;\n//        const response = await fetch(url);\n//        const data = await response.json();\n//        this.setState({lat: data.geonames[1].lat, lng: data.geonames[1].lng, country: data.geonames[1].countryName})\n////        console.log(data.geonames[0]);\n////        console.log(this.state);\n//    }\n//\n//    render(){\n//        return <div>\n//            {<div>{this.state.city}\n//                country: {this.state.country},\n//                lat: {this.state.lat},\n//                lng: {this.state.lng}\n//            </div>}\n//\n//        </div>;\n//    }\n//}\n\n//class FetchTemperature extends FetchCity {\n//    constructor(props) {\n//        super(props);\n//\n//    }\n//\n//    render(){\n//            return <div>\n//                ddfjsnvkjdsnfv\n//            </div>;\n//        }\n//\n//}\n\n"]},"metadata":{},"sourceType":"module"}