{"ast":null,"code":"function calculateDistance(lat1, lon1, lat2, lon2) {\n  let radius = 6371;\n  let dLat = deg2rad(lat2 - lat1);\n  let dLon = deg2rad(lon2 - lon1);\n  let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  let distance = radius * c;\n  return distance.toFixed(1);\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nexport default calculateDistance;","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/util.js"],"names":["calculateDistance","lat1","lon1","lat2","lon2","radius","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","distance","toFixed","deg","PI"],"mappings":"AAGA,SAASA,iBAAT,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAkD;AAC9C,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,IAAI,GAAGC,OAAO,CAACJ,IAAI,GAACF,IAAN,CAAlB;AACA,MAAIO,IAAI,GAAGD,OAAO,CAACH,IAAI,GAACF,IAAN,CAAlB;AACA,MAAIO,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,IAAmBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,CAAnB,GACJI,IAAI,CAACE,GAAL,CAASL,OAAO,CAACN,IAAD,CAAhB,IAA0BS,IAAI,CAACE,GAAL,CAASL,OAAO,CAACJ,IAAD,CAAhB,CAA1B,GACAO,IAAI,CAACC,GAAL,CAASH,IAAI,GAAC,CAAd,CADA,GACmBE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAC,CAAd,CAFvB;AAGA,MAAIK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAEN,CAAZ,CAAzB,CAAZ;AACA,MAAIO,QAAQ,GAAGX,MAAM,GAAGQ,CAAxB;AACA,SAAOG,QAAQ,CAACC,OAAT,CAAiB,CAAjB,CAAP;AACH;;AAED,SAASV,OAAT,CAAiBW,GAAjB,EAAsB;AACnB,SAAOA,GAAG,IAAIR,IAAI,CAACS,EAAL,GAAQ,GAAZ,CAAV;AACD;;AAED,eAAenB,iBAAf","sourcesContent":["\r\n\r\n\r\nfunction calculateDistance(lat1, lon1, lat2, lon2){\r\n    let radius = 6371;\r\n    let dLat = deg2rad(lat2-lat1);\r\n    let dLon = deg2rad(lon2-lon1);\r\n    let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n        Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    let distance = radius * c;\r\n    return distance.toFixed(1);\r\n}\r\n\r\nfunction deg2rad(deg) {\r\n   return deg * (Math.PI/180);\r\n }\r\n\r\n export default calculateDistance;"]},"metadata":{},"sourceType":"module"}