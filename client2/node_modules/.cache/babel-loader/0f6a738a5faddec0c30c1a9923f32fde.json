{"ast":null,"code":"module.exports = {\n  deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  },\n\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    let radius = 6371;\n    let dLat = deg2rad(lat2 - lat1);\n    let dLon = deg2rad(lon2 - lon1);\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let distance = radius * c;\n    return distance.toFixed(1);\n  }\n\n}; //export default calculateDistance;","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/util.js"],"names":["module","exports","deg2rad","deg","Math","PI","calculateDistance","lat1","lon1","lat2","lon2","radius","dLat","dLon","a","sin","cos","c","atan2","sqrt","distance","toFixed"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AACjBC,EAAAA,OAAO,CAACC,GAAD,EAAM;AACV,WAAOA,GAAG,IAAIC,IAAI,CAACC,EAAL,GAAQ,GAAZ,CAAV;AACD,GAHe;;AAIjBC,EAAAA,iBAAiB,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAAwB;AACrC,QAAIC,MAAM,GAAG,IAAb;AACA,QAAIC,IAAI,GAAGV,OAAO,CAACO,IAAI,GAACF,IAAN,CAAlB;AACA,QAAIM,IAAI,GAAGX,OAAO,CAACQ,IAAI,GAACF,IAAN,CAAlB;AACA,QAAIM,CAAC,GAAGV,IAAI,CAACW,GAAL,CAASH,IAAI,GAAC,CAAd,IAAmBR,IAAI,CAACW,GAAL,CAASH,IAAI,GAAC,CAAd,CAAnB,GACJR,IAAI,CAACY,GAAL,CAASd,OAAO,CAACK,IAAD,CAAhB,IAA0BH,IAAI,CAACY,GAAL,CAASd,OAAO,CAACO,IAAD,CAAhB,CAA1B,GACAL,IAAI,CAACW,GAAL,CAASF,IAAI,GAAC,CAAd,CADA,GACmBT,IAAI,CAACW,GAAL,CAASF,IAAI,GAAC,CAAd,CAFvB;AAGA,QAAII,CAAC,GAAG,IAAIb,IAAI,CAACc,KAAL,CAAWd,IAAI,CAACe,IAAL,CAAUL,CAAV,CAAX,EAAyBV,IAAI,CAACe,IAAL,CAAU,IAAEL,CAAZ,CAAzB,CAAZ;AACA,QAAIM,QAAQ,GAAGT,MAAM,GAAGM,CAAxB;AACA,WAAOG,QAAQ,CAACC,OAAT,CAAiB,CAAjB,CAAP;AACH;;AAdgB,CAAjB,C,CAmBA","sourcesContent":["module.exports = {\r\ndeg2rad(deg) {\r\n   return deg * (Math.PI/180);\r\n },\r\ncalculateDistance(lat1, lon1, lat2, lon2){\r\n    let radius = 6371;\r\n    let dLat = deg2rad(lat2-lat1);\r\n    let dLon = deg2rad(lon2-lon1);\r\n    let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n        Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    let distance = radius * c;\r\n    return distance.toFixed(1);\r\n}\r\n\r\n\r\n\r\n}\r\n//export default calculateDistance;"]},"metadata":{},"sourceType":"module"}