{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\SearchByCity.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport calculateDistance from './util';\nconst home = \"De Bilt\";\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.getTemperature = () => {\n      console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n      const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng + \"&username=destinationFinder\";\n      console.log(url);\n      fetch(url).then(res => res.json()).then(data => {\n        console.log(\"data: \");\n        console.log(data);\n        this.setState({\n          temperature: data.weatherObservation.temperature\n        });\n      }).catch(console.log);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Temperature: \", this.state.temperature, \" degrees\");\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var username = \"destinationFinder\";\n      this.setState({\n        userName: username\n      });\n      var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n      this.componentDidMountCurrentLocation(url);\n      url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n      this.componentDidMountCity(url);\n      console.log(\"lat: \" + this.state.lat);\n      console.log(\"homelat: \" + this.state.homeLat);\n      ReactDOM.render(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.state.city), document.getElementById('cityName'));\n\n      if (this.state.isTemperature) {\n        console.log(\"lat and lng: \" + this.state.lat + this.state.lng);\n        ReactDOM.render(React.createElement(this.getTemperature, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }), document.getElementById('temperatureInfo'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \":\", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"\\xA0\"), calculateDistance(this.state.homeLat, this.state.homeLng, this.state.lat, this.state.lng), \" km\"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      }\n    };\n\n    this.state = {\n      currentLocation: home,\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false,\n      lat: \"\",\n      lng: \"\"\n    };\n  }\n\n  componentDidMountCurrentLocation(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: \"\",\n      homeLat: cityData.geonames[0].lat,\n      homeLng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Current city: \", this.state.currentLocation), document.getElementById('currentCity'))));\n  }\n\n  componentDidMountCity(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: cityData.geonames[0].countryName,\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Country: \", this.state.country), document.getElementById('countryName')), ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Lat: \", this.state.lat, \", Lng: \", this.state.lng), document.getElementById('latlng'))));\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Choose a city and the information you wish to see\"), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Get Info\"));\n  }\n\n}\n\nexport default InformationSelector;","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/SearchByCity.js"],"names":["React","ReactDOM","calculateDistance","home","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","getTemperature","console","log","state","lat","lng","url","fetch","then","res","json","data","temperature","weatherObservation","catch","onSubmit","preventDefault","username","userName","currentLocation","componentDidMountCurrentLocation","componentDidMountCity","homeLat","render","document","getElementById","homeLng","cityData","country","geonames","countryName","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport calculateDistance from './util'\r\n\r\n\r\nconst home = \"De Bilt\";\r\n\r\nclass InformationSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentLocation: home,\r\n            homeLat: \"\",\r\n            homeLng: \"\",\r\n            city: \"De Bilt\",\r\n            isTemperature: false,\r\n            isDistance: false,\r\n            lat: \"\",\r\n            lng: \"\"\r\n        };\r\n    }\r\n    onChangeTemperature = () => {\r\n        this.setState(initialState => ({\r\n            isTemperature: !initialState.isTemperature,\r\n        }));\r\n    }\r\n    onChangeDistance = () => {\r\n        this.setState(initialState => ({\r\n            isDistance: !initialState.isDistance,\r\n        }));\r\n    }\r\n    onChangeCity = (e) => {\r\n        const citySelected = e.target.value;\r\n        this.setState({city: citySelected});\r\n    }\r\n\r\n    componentDidMountCurrentLocation(url) {\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(cityData => this.setState({country: \"\",\r\n            homeLat: cityData.geonames[0].lat, homeLng: cityData.geonames[0].lng}, () =>\r\n            ReactDOM.render(<p>Current city: {this.state.currentLocation}</p>, document.getElementById('currentCity')),\r\n        ));\r\n        }\r\n    componentDidMountCity(url) {\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(cityData => this.setState({country: cityData.geonames[0].countryName,\r\n            lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\r\n            ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')),\r\n            ReactDOM.render(<p>Lat: {this.state.lat}, Lng: {this.state.lng}</p>, document.getElementById('latlng'))\r\n        ));\r\n    }\r\n\r\n    getTemperature = () => {\r\n        console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\r\n        const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng +  \"&username=destinationFinder\";\r\n        console.log(url);\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"data: \");\r\n            console.log(data);\r\n            this.setState({temperature: data.weatherObservation.temperature, });\r\n        })\r\n        .catch(console.log);\r\n\r\n        return <div>Temperature: {this.state.temperature} degrees</div>;\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        var username = \"destinationFinder\"\r\n        this.setState({userName: username});\r\n        var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\r\n        this.componentDidMountCurrentLocation(url);\r\n\r\n        url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\r\n        this.componentDidMountCity(url);\r\n\r\n        console.log(\"lat: \" + this.state.lat);\r\n        console.log(\"homelat: \" + this.state.homeLat);\r\n        ReactDOM.render(<p>{this.state.city}</p>, document.getElementById('cityName'));\r\n        if (this.state.isTemperature){\r\n            console.log(\"lat and lng: \" + this.state.lat + this.state.lng);\r\n            ReactDOM.render(< this.getTemperature />, document.getElementById('temperatureInfo'));\r\n        }\r\n        else{\r\n            ReactDOM.render(\"\", document.getElementById('temperature'));\r\n        }\r\n        if (this.state.isDistance){\r\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}:<span>&nbsp;</span>\r\n             {calculateDistance(this.state.homeLat, this.state.homeLng,\r\n                                    this.state.lat, this.state.lng)} km</p>, document.getElementById('distance'));\r\n        }\r\n        else {\r\n            ReactDOM.render(\"\", document.getElementById('distance'));\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n         <form onSubmit={this.onSubmit}>\r\n              <p>Choose a city and the information you wish to see</p>\r\n              <input type='text' onChange={this.onChangeCity} />\r\n                <p>\r\n                <label>\r\n                  Temperature\r\n                  <input\r\n                    name=\"Temperature\"\r\n                    type=\"checkbox\"\r\n                    checked={this.state.name}\r\n                    onChange={this.onChangeTemperature}/>\r\n                </label>\r\n                <label>\r\n                  Distance\r\n                  <input\r\n                    name=\"Distance\"\r\n                    type=\"checkbox\"\r\n                    checked={this.state.name}\r\n                    onChange={this.onChangeDistance}/>\r\n                </label>\r\n              </p>\r\n              <button>\r\n                Get Info\r\n              </button>\r\n          </form>\r\n       );\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default InformationSelector"]},"metadata":{},"sourceType":"module"}