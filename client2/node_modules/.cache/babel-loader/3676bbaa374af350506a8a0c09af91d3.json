{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.getTemperature = () => {\n      var returnData;\n      console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n      const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng + \"&username=destinationFinder\";\n      console.log(url);\n      fetch(url).then(res => res.json()).then(data => {\n        console.log(\"data: \");\n        console.log(data);\n        returnData = data;\n      }).catch(console.log);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"return \", data, \";\");\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var username = \"destinationFinder\";\n      this.setState({\n        userName: username\n      });\n      var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n      this.componentDidMountCurrentLocation(url);\n      url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n      this.componentDidMountCity(url);\n      console.log(\"lat: \" + this.state.lat);\n      console.log(\"homelat: \" + this.state.homeLat);\n      ReactDOM.render(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.state.city), document.getElementById('cityName'));\n\n      if (this.state.isTemperature) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \"Asked for temperature\"), document.getElementById('temperature'));\n        console.log(\"lat and lng: \" + this.state.lat + this.state.lng); //ReactDOM.render(<FetchTemperature oldState={this.state} />, document.getElementById('temperatureInfo'));\n\n        ReactDOM.render(React.createElement(this.getTemperature, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }), document.getElementById('temperatureInfo'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \":\", this.calculateDistance(this.state.homeLat, this.state.homeLng, this.state.lat, this.state.lng), \" km\"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      } //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n\n    };\n\n    this.state = {\n      currentLocation: \"De Bilt\",\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false,\n      lat: \"\",\n      lng: \"\"\n    };\n  }\n\n  componentDidMountCurrentLocation(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: \"\",\n      homeLat: cityData.geonames[0].lat,\n      homeLng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Current city: \", this.state.currentLocation), document.getElementById('currentCity'))));\n  }\n\n  componentDidMountCity(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: cityData.geonames[0].countryName,\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Country: \", this.state.country), document.getElementById('countryName')), ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Lat: \", this.state.lat, \", Lng: \", this.state.lng), document.getElementById('latlng'))));\n  }\n\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    let radius = 6371;\n    let dLat = this.deg2rad(lat2 - lat1); // deg2rad below\n\n    let dLon = this.deg2rad(lon2 - lon1);\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let distance = radius * c;\n    return distance;\n  }\n\n  deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Get Info\"));\n  }\n\n}\n\nReactDOM.render(React.createElement(InformationSelector, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 153\n  },\n  __self: this\n}), document.getElementById('selectInformationTypes')); //class FetchTemperature extends InformationSelector{\n//    constructor(props) {\n//        super(props);\n//        console.log(\"props lat: \");\n//        console.log(props.lat);\n//        this.state = {\n//            url: \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + props.lat + \"&lng=\" + props.lng +  \"&username=destinationFinder\",\n//            cityLat: \"\",\n//            cityLng: \"\"\n//        };\n//        console.log(this.state);\n////    console.log(props.oldState);\n//    }\n//\n////    static getDerivedStateFromProps(props, state){\n////        return {cityLat: props.lat}\n////    }\n//\n//    async componentDidMount(){\n//        console.log(this.state);\n//        const url = this.state.url;\n//        const response = await fetch(url);\n//        const data = await response.json();\n//        this.setState({clouds: data.clouds, temperature: data.temperature, windSpeed: data.windSpeed})\n//        console.log(\"state: \");\n//        console.log(data);\n//    }\n//\n//    render(){\n//         return <div>\n//             {<div>\n//                 clouds: {this.state.clouds},\n//                 temperature: {this.state.temperature},\n//                 windSpeed: {this.state.windSpeed}\n//             </div>}\n//\n//         </div>;\n//     }\n//}","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/index.js"],"names":["React","ReactDOM","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","getTemperature","returnData","console","log","state","lat","lng","url","fetch","then","res","json","data","catch","onSubmit","preventDefault","username","userName","currentLocation","componentDidMountCurrentLocation","componentDidMountCity","homeLat","render","document","getElementById","calculateDistance","homeLng","cityData","country","geonames","countryName","lat1","lon1","lat2","lon2","radius","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","distance","deg","PI","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAGA,MAAMC,mBAAN,SAAkCF,KAAK,CAACG,SAAxC,CAAkD;AAG9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAanBC,mBAbmB,GAaG,MAAM;AACxB,WAAKC,QAAL,CAAcC,YAAY,KAAK;AAC3BC,QAAAA,aAAa,EAAE,CAACD,YAAY,CAACC;AADF,OAAL,CAA1B;AAGH,KAjBkB;;AAAA,SAkBnBC,gBAlBmB,GAkBA,MAAM;AACrB,WAAKH,QAAL,CAAcC,YAAY,KAAK;AAC3BG,QAAAA,UAAU,EAAE,CAACH,YAAY,CAACG;AADC,OAAL,CAA1B;AAGH,KAtBkB;;AAAA,SAwBnBC,YAxBmB,GAwBHC,CAAD,IAAO;AAClB,YAAMC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA9B;AACA,WAAKT,QAAL,CAAc;AAACU,QAAAA,IAAI,EAAEH;AAAP,OAAd;AACH,KA3BkB;;AAAA,SA4DnBI,cA5DmB,GA4DF,MAAM;AACnB,UAAIC,UAAJ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8B,KAAKC,KAAL,CAAWC,GAAzC,GAA+C,KAA/C,GAAuD,KAAKD,KAAL,CAAWE,GAA9E;AACA,YAAMC,GAAG,GAAG,uDAAuD,KAAKH,KAAL,CAAWC,GAAlE,GAAwE,OAAxE,GAAkF,KAAKD,KAAL,CAAWE,GAA7F,GAAoG,6BAAhH;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAC,MAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACVV,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACAX,QAAAA,UAAU,GAAGW,IAAb;AACH,OAND,EAOCC,KAPD,CAOOX,OAAO,CAACC,GAPf;AAQI,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACIS,IADJ,MAAR;AAGH,KA5Ec;;AAAA,SAkFnBE,QAlFmB,GAkFPnB,CAAD,IAAO;AAEdA,MAAAA,CAAC,CAACoB,cAAF;AACA,UAAIC,QAAQ,GAAG,mBAAf;AACA,WAAK3B,QAAL,CAAc;AAAC4B,QAAAA,QAAQ,EAAED;AAAX,OAAd;AACA,UAAIT,GAAG,GAAG,oDAAoD,KAAKH,KAAL,CAAWc,eAA/D,GAAiF,YAAjF,GAAgGF,QAA1G;AACA,WAAKG,gCAAL,CAAsCZ,GAAtC;AAEAA,MAAAA,GAAG,GAAG,oDAAoD,KAAKH,KAAL,CAAWL,IAA/D,GAAsE,YAAtE,GAAqFiB,QAA3F;AACA,WAAKI,qBAAL,CAA2Bb,GAA3B;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAU,KAAKC,KAAL,CAAWC,GAAjC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAc,KAAKC,KAAL,CAAWiB,OAArC;AACAtC,MAAAA,QAAQ,CAACuC,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKlB,KAAL,CAAWL,IAAf,CAAhB,EAA0CwB,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA1C;;AACA,UAAI,KAAKpB,KAAL,CAAWb,aAAf,EAA6B;AACzBR,QAAAA,QAAQ,CAACuC,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAhB,EAA8CC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAA9C;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB,KAAKC,KAAL,CAAWC,GAA7B,GAAmC,KAAKD,KAAL,CAAWE,GAA1D,EAFyB,CAGzB;;AACAvB,QAAAA,QAAQ,CAACuC,MAAT,CAAgB,yBAAO,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhB,EAA0CC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAA1C;AACH,OALD,MAMI;AACAzC,QAAAA,QAAQ,CAACuC,MAAT,CAAgB,EAAhB,EAAoBC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAApB;AACH;;AACD,UAAI,KAAKpB,KAAL,CAAWX,UAAf,EAA0B;AACtBV,QAAAA,QAAQ,CAACuC,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAkB,KAAKlB,KAAL,CAAWc,eAA7B,UAAkD,KAAKd,KAAL,CAAWL,IAA7D,OACf,KAAK0B,iBAAL,CAAuB,KAAKrB,KAAL,CAAWiB,OAAlC,EAA2C,KAAKjB,KAAL,CAAWsB,OAAtD,EACuB,KAAKtB,KAAL,CAAWC,GADlC,EACuC,KAAKD,KAAL,CAAWE,GADlD,CADe,QAAhB,EAEiEiB,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAFjE;AAGH,OAJD,MAKK;AACDzC,QAAAA,QAAQ,CAACuC,MAAT,CAAgB,EAAhB,EAAoBC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAApB;AACH,OA9Ba,CA+Bd;;AACH,KAlHkB;;AAEf,SAAKpB,KAAL,GAAa;AACTc,MAAAA,eAAe,EAAE,SADR;AAETG,MAAAA,OAAO,EAAE,EAFA;AAGTK,MAAAA,OAAO,EAAE,EAHA;AAIT3B,MAAAA,IAAI,EAAE,SAJG;AAKTR,MAAAA,aAAa,EAAE,KALN;AAMTE,MAAAA,UAAU,EAAE,KANH;AAOTY,MAAAA,GAAG,EAAE,EAPI;AAQTC,MAAAA,GAAG,EAAE;AARI,KAAb;AAUH;;AAiBDa,EAAAA,gCAAgC,CAACZ,GAAD,EAAM;AAC9BC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMkB,QAAQ,IAAI,KAAKtC,QAAL,CAAc;AAACuC,MAAAA,OAAO,EAAE,EAAV;AAC5BP,MAAAA,OAAO,EAAEM,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBxB,GADF;AACOqB,MAAAA,OAAO,EAAEC,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBvB;AADrC,KAAd,EACyD,MACvEvB,QAAQ,CAACuC,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkB,KAAKlB,KAAL,CAAWc,eAA7B,CAAhB,EAAmEK,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAnE,CAFc,CAFlB;AAMH;;AAELJ,EAAAA,qBAAqB,CAACb,GAAD,EAAM;AACvBC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMkB,QAAQ,IAAI,KAAKtC,QAAL,CAAc;AAACuC,MAAAA,OAAO,EAAED,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBC,WAA/B;AAC5BzB,MAAAA,GAAG,EAAEsB,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBxB,GADE;AACGC,MAAAA,GAAG,EAAEqB,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBvB;AAD7B,KAAd,EACiD,MAC/DvB,QAAQ,CAACuC,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAa,KAAKlB,KAAL,CAAWwB,OAAxB,CAAhB,EAAsDL,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAtD,CAFc,EAGdzC,QAAQ,CAACuC,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAS,KAAKlB,KAAL,CAAWC,GAApB,aAAgC,KAAKD,KAAL,CAAWE,GAA3C,CAAhB,EAAqEiB,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAArE,CAHc,CAFlB;AAOH;;AAEDC,EAAAA,iBAAiB,CAACM,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAAwB;AACrC,QAAIC,MAAM,GAAG,IAAb;AACA,QAAIC,IAAI,GAAG,KAAKC,OAAL,CAAaJ,IAAI,GAACF,IAAlB,CAAX,CAFqC,CAEA;;AACrC,QAAIO,IAAI,GAAG,KAAKD,OAAL,CAAaH,IAAI,GAACF,IAAlB,CAAX;AACA,QAAIO,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,IAAmBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,CAAnB,GACJI,IAAI,CAACE,GAAL,CAAS,KAAKL,OAAL,CAAaN,IAAb,CAAT,IAA+BS,IAAI,CAACE,GAAL,CAAS,KAAKL,OAAL,CAAaJ,IAAb,CAAT,CAA/B,GACAO,IAAI,CAACC,GAAL,CAASH,IAAI,GAAC,CAAd,CADA,GACmBE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAC,CAAd,CAFvB;AAGA,QAAIK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAEN,CAAZ,CAAzB,CAAZ;AACA,QAAIO,QAAQ,GAAGX,MAAM,GAAGQ,CAAxB;AACA,WAAOG,QAAP;AACH;;AAoBFT,EAAAA,OAAO,CAACU,GAAD,EAAM;AACV,WAAOA,GAAG,IAAIP,IAAI,CAACQ,EAAL,GAAQ,GAAZ,CAAV;AACD;;AAmCD1B,EAAAA,MAAM,GAAG;AACL,WACC;AAAM,MAAA,QAAQ,EAAE,KAAKR,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAE,KAAKpB,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADL,EAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,OAAO,EAAE,KAAKU,KAAL,CAAW6C,IAHtB;AAIE,MAAA,QAAQ,EAAE,KAAK7D,mBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADA,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,OAAO,EAAE,KAAKgB,KAAL,CAAW6C,IAHtB;AAIE,MAAA,QAAQ,EAAE,KAAKzD,gBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CATA,CAFP,EAoBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBL,CADD;AA0BH;;AAjJ6C;;AAoJlDT,QAAQ,CAACuC,MAAT,CAAgB,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyCC,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CAAzC,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nclass InformationSelector extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentLocation: \"De Bilt\",\n            homeLat: \"\",\n            homeLng: \"\",\n            city: \"De Bilt\",\n            isTemperature: false,\n            isDistance: false,\n            lat: \"\",\n            lng: \"\"\n        };\n    }\n    onChangeTemperature = () => {\n        this.setState(initialState => ({\n            isTemperature: !initialState.isTemperature,\n        }));\n    }\n    onChangeDistance = () => {\n        this.setState(initialState => ({\n            isDistance: !initialState.isDistance,\n        }));\n    }\n\n    onChangeCity = (e) => {\n        const citySelected = e.target.value;\n        this.setState({city: citySelected});\n    }\n\n    componentDidMountCurrentLocation(url) {\n            fetch(url)\n            .then(res => res.json())\n            .then(cityData => this.setState({country: \"\",\n                homeLat: cityData.geonames[0].lat, homeLng: cityData.geonames[0].lng}, () =>\n                ReactDOM.render(<p>Current city: {this.state.currentLocation}</p>, document.getElementById('currentCity')),\n            ));\n        }\n\n    componentDidMountCity(url) {\n        fetch(url)\n        .then(res => res.json())\n        .then(cityData => this.setState({country: cityData.geonames[0].countryName,\n            lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\n            ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')),\n            ReactDOM.render(<p>Lat: {this.state.lat}, Lng: {this.state.lng}</p>, document.getElementById('latlng'))\n        ));\n    }\n\n    calculateDistance(lat1, lon1, lat2, lon2){\n        let radius = 6371;\n        let dLat = this.deg2rad(lat2-lat1);  // deg2rad below\n        let dLon = this.deg2rad(lon2-lon1);\n        let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n            Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *\n            Math.sin(dLon/2) * Math.sin(dLon/2);\n        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        let distance = radius * c;\n        return distance;\n    }\n\n    getTemperature = () => {\n        var returnData;\n        console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n        const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng +  \"&username=destinationFinder\";\n        console.log(url);\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            console.log(\"data: \");\n            console.log(data);\n            returnData = data;\n        })\n        .catch(console.log);\n            return  <div>\n                return {data};\n            </div>\n        }\n\n   deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n\n    onSubmit = (e) => {\n\n        e.preventDefault();\n        var username = \"destinationFinder\"\n        this.setState({userName: username});\n        var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n        this.componentDidMountCurrentLocation(url);\n\n        url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n        this.componentDidMountCity(url);\n\n        console.log(\"lat: \" + this.state.lat);\n        console.log(\"homelat: \" + this.state.homeLat);\n        ReactDOM.render(<p>{this.state.city}</p>, document.getElementById('cityName'));\n        if (this.state.isTemperature){\n            ReactDOM.render(<p>Asked for temperature</p>, document.getElementById('temperature'));\n            console.log(\"lat and lng: \" + this.state.lat + this.state.lng);\n            //ReactDOM.render(<FetchTemperature oldState={this.state} />, document.getElementById('temperatureInfo'));\n            ReactDOM.render(< this.getTemperature />, document.getElementById('temperatureInfo'));\n        }\n        else{\n            ReactDOM.render(\"\", document.getElementById('temperature'));\n        }\n        if (this.state.isDistance){\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}:\n            {this.calculateDistance(this.state.homeLat, this.state.homeLng,\n                                    this.state.lat, this.state.lng)} km</p>, document.getElementById('distance'));\n        }\n        else {\n            ReactDOM.render(\"\", document.getElementById('distance'));\n        }\n        //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n    }\n    render() {\n        return (\n         <form onSubmit={this.onSubmit}>\n              <input type='text' onChange={this.onChangeCity} />\n                <p>\n                <label>\n                  Temperature\n                  <input\n                    name=\"Temperature\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeTemperature}/>\n                </label>\n                <label>\n                  Distance\n                  <input\n                    name=\"Distance\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeDistance}/>\n                </label>\n              </p>\n              <button>\n                Get Info\n              </button>\n          </form>\n        );\n    }\n}\n\nReactDOM.render(<InformationSelector />, document.getElementById('selectInformationTypes'));\n\n//class FetchTemperature extends InformationSelector{\n//    constructor(props) {\n//        super(props);\n//        console.log(\"props lat: \");\n//        console.log(props.lat);\n//        this.state = {\n//            url: \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + props.lat + \"&lng=\" + props.lng +  \"&username=destinationFinder\",\n//            cityLat: \"\",\n//            cityLng: \"\"\n//        };\n//        console.log(this.state);\n////    console.log(props.oldState);\n//    }\n//\n////    static getDerivedStateFromProps(props, state){\n////        return {cityLat: props.lat}\n////    }\n//\n//    async componentDidMount(){\n//        console.log(this.state);\n//        const url = this.state.url;\n//        const response = await fetch(url);\n//        const data = await response.json();\n//        this.setState({clouds: data.clouds, temperature: data.temperature, windSpeed: data.windSpeed})\n//        console.log(\"state: \");\n//        console.log(data);\n//    }\n//\n//    render(){\n//         return <div>\n//             {<div>\n//                 clouds: {this.state.clouds},\n//                 temperature: {this.state.temperature},\n//                 windSpeed: {this.state.windSpeed}\n//             </div>}\n//\n//         </div>;\n//     }\n//}\n\n\n\n"]},"metadata":{},"sourceType":"module"}