{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.getTemperature = () => {\n      console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n      const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng + \"&username=destinationFinder\";\n      console.log(url);\n      fetch(url).then(res => res.json()).then(data => {\n        console.log(\"data: \");\n        console.log(data);\n        this.setState({\n          temperature: data.weatherObservation.temperature\n        });\n      }).catch(console.log);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Temperature: \", this.state.temperature, \" degrees\");\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var username = \"destinationFinder\";\n      this.setState({\n        userName: username\n      });\n      var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n      this.componentDidMountCurrentLocation(url);\n      url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n      this.componentDidMountCity(url);\n      console.log(\"lat: \" + this.state.lat);\n      console.log(\"homelat: \" + this.state.homeLat);\n      ReactDOM.render(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.state.city), document.getElementById('cityName'));\n\n      if (this.state.isTemperature) {\n        console.log(\"lat and lng: \" + this.state.lat + this.state.lng);\n        ReactDOM.render(React.createElement(this.getTemperature, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), document.getElementById('temperatureInfo'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \":\", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, \"\\xA0\"), this.calculateDistance(this.state.homeLat, this.state.homeLng, this.state.lat, this.state.lng), \" km\"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      } //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n\n    };\n\n    this.state = {\n      currentLocation: \"De Bilt\",\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false,\n      lat: \"\",\n      lng: \"\"\n    };\n  }\n\n  componentDidMountCurrentLocation(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: \"\",\n      homeLat: cityData.geonames[0].lat,\n      homeLng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Current city: \", this.state.currentLocation), document.getElementById('currentCity'))));\n  }\n\n  componentDidMountCity(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: cityData.geonames[0].countryName,\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Country: \", this.state.country), document.getElementById('countryName')), ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Lat: \", this.state.lat, \", Lng: \", this.state.lng), document.getElementById('latlng'))));\n  }\n\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    let radius = 6371;\n    let dLat = this.deg2rad(lat2 - lat1); // deg2rad below\n\n    let dLon = this.deg2rad(lon2 - lon1);\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let distance = radius * c;\n    return distance.toFixed(1);\n  }\n\n  deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Get Info\"));\n  }\n\n}\n\nReactDOM.render(React.createElement(InformationSelector, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148\n  },\n  __self: this\n}), document.getElementById('selectInformationTypes'));\n\nclass CapitalInit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initDB = () => {\n      const url = \"http://api.geonames.org/countryInfoJSON?formatted=true&username=destinationFinder\";\n      fetch(url).then(res => res.json()).then(data => {\n        console.log(data.geonames.length);\n        console.log(data.geonames[0].countryName);\n        console.log(data.geonames[0].languages);\n        let i;\n\n        for (i = 0; i < data.geonames.length; i++) {\n          const city = {\n            \"cityName\": data.geonames[i].capital,\n            \"countryName\": data.geonames[i].countryName,\n            \"spokenLanguages\": data.geonames[i].languages\n          };\n          axios.post('http://localhost:5000/cities/add', city).then(res => console.log(res.data));\n        }\n      }).catch(console.log);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.initDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Initialize Database\"));\n  }\n\n}\n\nReactDOM.render(React.createElement(CapitalInit, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 185\n  },\n  __self: this\n}), document.getElementById('fillDBWithCapitals')); //class FetchTemperature extends InformationSelector{\n//    constructor(props) {\n//        super(props);\n//        console.log(\"props lat: \");\n//        console.log(props.lat);\n//        this.state = {\n//            url: \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + props.lat + \"&lng=\" + props.lng +  \"&username=destinationFinder\",\n//            cityLat: \"\",\n//            cityLng: \"\"\n//        };\n//        console.log(this.state);\n////    console.log(props.oldState);\n//    }\n//\n////    static getDerivedStateFromProps(props, state){\n////        return {cityLat: props.lat}\n////    }\n//\n//    async componentDidMount(){\n//        console.log(this.state);\n//        const url = this.state.url;\n//        const response = await fetch(url);\n//        const data = await response.json();\n//        this.setState({clouds: data.clouds, temperature: data.temperature, windSpeed: data.windSpeed})\n//        console.log(\"state: \");\n//        console.log(data);\n//    }\n//\n//    render(){\n//         return <div>\n//             {<div>\n//                 clouds: {this.state.clouds},\n//                 temperature: {this.state.temperature},\n//                 windSpeed: {this.state.windSpeed}\n//             </div>}\n//\n//         </div>;\n//     }\n//}","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/index.js"],"names":["React","ReactDOM","axios","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","getTemperature","console","log","state","lat","lng","url","fetch","then","res","json","data","temperature","weatherObservation","catch","onSubmit","preventDefault","username","userName","currentLocation","componentDidMountCurrentLocation","componentDidMountCity","homeLat","render","document","getElementById","calculateDistance","homeLng","cityData","country","geonames","countryName","lat1","lon1","lat2","lon2","radius","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","distance","toFixed","deg","PI","name","CapitalInit","initDB","length","languages","i","capital","post"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nclass InformationSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentLocation: \"De Bilt\",\n            homeLat: \"\",\n            homeLng: \"\",\n            city: \"De Bilt\",\n            isTemperature: false,\n            isDistance: false,\n            lat: \"\",\n            lng: \"\"\n        };\n    }\n    onChangeTemperature = () => {\n        this.setState(initialState => ({\n            isTemperature: !initialState.isTemperature,\n        }));\n    }\n    onChangeDistance = () => {\n        this.setState(initialState => ({\n            isDistance: !initialState.isDistance,\n        }));\n    }\n    onChangeCity = (e) => {\n        const citySelected = e.target.value;\n        this.setState({city: citySelected});\n    }\n\n    componentDidMountCurrentLocation(url) {\n            fetch(url)\n            .then(res => res.json())\n            .then(cityData => this.setState({country: \"\",\n                homeLat: cityData.geonames[0].lat, homeLng: cityData.geonames[0].lng}, () =>\n                ReactDOM.render(<p>Current city: {this.state.currentLocation}</p>, document.getElementById('currentCity')),\n            ));\n        }\n\n    componentDidMountCity(url) {\n        fetch(url)\n        .then(res => res.json())\n        .then(cityData => this.setState({country: cityData.geonames[0].countryName,\n            lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\n            ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')),\n            ReactDOM.render(<p>Lat: {this.state.lat}, Lng: {this.state.lng}</p>, document.getElementById('latlng'))\n        ));\n    }\n\n    calculateDistance(lat1, lon1, lat2, lon2){\n        let radius = 6371;\n        let dLat = this.deg2rad(lat2-lat1);  // deg2rad below\n        let dLon = this.deg2rad(lon2-lon1);\n        let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n            Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *\n            Math.sin(dLon/2) * Math.sin(dLon/2);\n        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        let distance = radius * c;\n        return distance.toFixed(1);\n    }\n\n    getTemperature = () => {\n        console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n        const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng +  \"&username=destinationFinder\";\n        console.log(url);\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            console.log(\"data: \");\n            console.log(data);\n            this.setState({temperature: data.weatherObservation.temperature, });\n        })\n        .catch(console.log);\n\n        return <div>Temperature: {this.state.temperature} degrees</div>;\n    }\n\n   deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n\n    onSubmit = (e) => {\n\n        e.preventDefault();\n        var username = \"destinationFinder\"\n        this.setState({userName: username});\n        var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n        this.componentDidMountCurrentLocation(url);\n\n        url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n        this.componentDidMountCity(url);\n\n        console.log(\"lat: \" + this.state.lat);\n        console.log(\"homelat: \" + this.state.homeLat);\n        ReactDOM.render(<p>{this.state.city}</p>, document.getElementById('cityName'));\n        if (this.state.isTemperature){\n            console.log(\"lat and lng: \" + this.state.lat + this.state.lng);\n            ReactDOM.render(< this.getTemperature />, document.getElementById('temperatureInfo'));\n        }\n        else{\n            ReactDOM.render(\"\", document.getElementById('temperature'));\n        }\n        if (this.state.isDistance){\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}:<span>&nbsp;</span>\n             {this.calculateDistance(this.state.homeLat, this.state.homeLng,\n                                    this.state.lat, this.state.lng)} km</p>, document.getElementById('distance'));\n        }\n        else {\n            ReactDOM.render(\"\", document.getElementById('distance'));\n        }\n        //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n    }\n    render() {\n        return (\n         <form onSubmit={this.onSubmit}>\n              <input type='text' onChange={this.onChangeCity} />\n                <p>\n                <label>\n                  Temperature\n                  <input\n                    name=\"Temperature\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeTemperature}/>\n                </label>\n                <label>\n                  Distance\n                  <input\n                    name=\"Distance\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeDistance}/>\n                </label>\n              </p>\n              <button>\n                Get Info\n              </button>\n          </form>\n        );\n\n\n    }\n}\n\nReactDOM.render(<InformationSelector />, document.getElementById('selectInformationTypes'));\n\nclass CapitalInit extends React.Component {\n\n    initDB = () => {\n        const url = \"http://api.geonames.org/countryInfoJSON?formatted=true&username=destinationFinder\";\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            console.log(data.geonames.length);\n            console.log(data.geonames[0].countryName);\n            console.log(data.geonames[0].languages);\n            let i;\n            for (i = 0; i< data.geonames.length;i++){\n                const city = {\n                    \"cityName\": data.geonames[i].capital,\n                    \"countryName\": data.geonames[i].countryName,\n                    \"spokenLanguages\": data.geonames[i].languages,\n                }\n                axios.post('http://localhost:5000/cities/add', city)\n                .then(res => console.log(res.data));\n            }\n\n\n\n        })\n        .catch(console.log);\n    }\n\n    render() {\n    return(\n        <div>\n            <button onClick={this.initDB} >Initialize Database</button>\n        </div>\n    )}\n}\n\nReactDOM.render(<CapitalInit />, document.getElementById('fillDBWithCapitals'));\n\n\n\n\n//class FetchTemperature extends InformationSelector{\n//    constructor(props) {\n//        super(props);\n//        console.log(\"props lat: \");\n//        console.log(props.lat);\n//        this.state = {\n//            url: \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + props.lat + \"&lng=\" + props.lng +  \"&username=destinationFinder\",\n//            cityLat: \"\",\n//            cityLng: \"\"\n//        };\n//        console.log(this.state);\n////    console.log(props.oldState);\n//    }\n//\n////    static getDerivedStateFromProps(props, state){\n////        return {cityLat: props.lat}\n////    }\n//\n//    async componentDidMount(){\n//        console.log(this.state);\n//        const url = this.state.url;\n//        const response = await fetch(url);\n//        const data = await response.json();\n//        this.setState({clouds: data.clouds, temperature: data.temperature, windSpeed: data.windSpeed})\n//        console.log(\"state: \");\n//        console.log(data);\n//    }\n//\n//    render(){\n//         return <div>\n//             {<div>\n//                 clouds: {this.state.clouds},\n//                 temperature: {this.state.temperature},\n//                 windSpeed: {this.state.windSpeed}\n//             </div>}\n//\n//         </div>;\n//     }\n//}\n\n\n\n"]},"metadata":{},"sourceType":"module"}