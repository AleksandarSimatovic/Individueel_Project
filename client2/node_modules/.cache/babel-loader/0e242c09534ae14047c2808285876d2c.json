{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.onSubmit = e => {\n      this.calculateDistance(52, 10, 10, 10);\n      e.preventDefault();\n      var username = \"DestinationFinder\";\n      var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n      this.componentDidMountCurrentLocation(url);\n      url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n      this.componentDidMountCity(url);\n      ReactDOM.render(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.state.city), document.getElementById('cityName'));\n\n      if (this.state.isTemperature) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"Asked for temperature\"), document.getElementById('temperature'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \": \"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      } //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n\n    };\n\n    this.state = {\n      currentLocation: \"De Bilt\",\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false\n    };\n  }\n\n  componentDidMountCurrentLocation(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: \"\",\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Current city: \", this.state.currentLocation), document.getElementById('currentCity'))));\n  }\n\n  componentDidMountCity(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: cityData.geonames[0].countryName,\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Country: \", this.state.country), document.getElementById('countryName')), ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Lat: \", this.state.lat, \", Lng: \", this.state.lng), document.getElementById('latlng'))));\n  }\n\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    let radius = 6371;\n    let dLat = this.deg2rad(lat2 - lat1); // deg2rad below\n\n    let dLon = this.deg2rad(lon2 - lon1);\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let distance = radius * c;\n    console.log(lat1);\n  }\n\n  deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"De Bilt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"De Bilt\"), React.createElement(\"option\", {\n      value: \"Manchester\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Manchester\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Get Info\"));\n  }\n\n}\n\nReactDOM.render(React.createElement(InformationSelector, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 128\n  },\n  __self: this\n}), document.getElementById('selectInformationTypes')); //class FetchCity extends InformationSelector{\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            loading: true,\n//            url: \"http://api.geonames.org/searchJSON?name_equals=\" + props.oldState.city + \"&username=DestinationFinder\",\n//            lat: \"\",\n//            lng: \"\",\n//        };\n////    console.log(this.state);\n////    console.log(props.oldState);\n//    }\n//\n//    async componentDidMount(){\n//        const url = this.state.url;\n//        const response = await fetch(url);\n//        const data = await response.json();\n//        this.setState({lat: data.geonames[1].lat, lng: data.geonames[1].lng, country: data.geonames[1].countryName})\n////        console.log(data.geonames[0]);\n////        console.log(this.state);\n//    }\n//\n//    render(){\n//        return <div>\n//            {<div>{this.state.city}\n//                country: {this.state.country},\n//                lat: {this.state.lat},\n//                lng: {this.state.lng}\n//            </div>}\n//\n//        </div>;\n//    }\n//}\n//class FetchTemperature extends FetchCity {\n//    constructor(props) {\n//        super(props);\n//\n//    }\n//\n//    render(){\n//            return <div>\n//                ddfjsnvkjdsnfv\n//            </div>;\n//        }\n//\n//}","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/index.js"],"names":["React","ReactDOM","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","onSubmit","calculateDistance","preventDefault","username","url","state","currentLocation","componentDidMountCurrentLocation","componentDidMountCity","render","document","getElementById","homeLat","homeLng","fetch","then","res","json","cityData","country","lat","geonames","lng","countryName","lat1","lon1","lat2","lon2","radius","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","distance","console","log","deg","PI","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nclass InformationSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentLocation: \"De Bilt\",\n            homeLat: \"\",\n            homeLng: \"\",\n            city: \"De Bilt\",\n            isTemperature: false,\n            isDistance: false\n        };\n    }\n    onChangeTemperature = () => {\n        this.setState(initialState => ({\n            isTemperature: !initialState.isTemperature,\n        }));\n    }\n    onChangeDistance = () => {\n        this.setState(initialState => ({\n            isDistance: !initialState.isDistance,\n        }));\n    }\n\n    onChangeCity = (e) => {\n        const citySelected = e.target.value;\n        this.setState({city: citySelected});\n    }\n\n    componentDidMountCurrentLocation(url) {\n            fetch(url)\n            .then(res => res.json())\n            .then(cityData => this.setState({country: \"\",\n                lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\n                ReactDOM.render(<p>Current city: {this.state.currentLocation}</p>, document.getElementById('currentCity')),\n            ));\n        }\n\n    componentDidMountCity(url) {\n        fetch(url)\n        .then(res => res.json())\n        .then(cityData => this.setState({country: cityData.geonames[0].countryName,\n            lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\n            ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')),\n            ReactDOM.render(<p>Lat: {this.state.lat}, Lng: {this.state.lng}</p>, document.getElementById('latlng'))\n        ));\n    }\n\n    calculateDistance(lat1, lon1, lat2, lon2){\n        let radius = 6371;\n        let dLat = this.deg2rad(lat2-lat1);  // deg2rad below\n        let dLon = this.deg2rad(lon2-lon1);\n        let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n            Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *\n            Math.sin(dLon/2) * Math.sin(dLon/2);\n        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        let distance = radius * c;\n    console.log(lat1);\n    }\n\n   deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n\n    onSubmit = (e) => {\n        this.calculateDistance(52,10,10,10);\n        e.preventDefault();\n        var username = \"DestinationFinder\"\n        var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n        this.componentDidMountCurrentLocation(url);\n\n\n        url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n        this.componentDidMountCity(url);\n\n\n        ReactDOM.render(<p>{this.state.city}</p>, document.getElementById('cityName'));\n        if (this.state.isTemperature){\n            ReactDOM.render(<p>Asked for temperature</p>, document.getElementById('temperature'));\n        }\n        else{\n            ReactDOM.render(\"\", document.getElementById('temperature'));\n        }\n        if (this.state.isDistance){\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}: </p>, document.getElementById('distance'));\n        }\n        else {\n            ReactDOM.render(\"\", document.getElementById('distance'));\n        }\n        //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n    }\n    render() {\n        return (\n         <form onSubmit={this.onSubmit}>\n              <select onChange={this.onChangeCity}>\n                <option value=\"De Bilt\">De Bilt</option>\n                <option value=\"Manchester\">Manchester</option>\n              </select>\n              <p>\n                <label>\n                  Temperature\n                  <input\n                    name=\"Temperature\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeTemperature}/>\n                </label>\n                <label>\n                  Distance\n                  <input\n                    name=\"Distance\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeDistance}/>\n                </label>\n              </p>\n              <button>\n                Get Info\n              </button>\n          </form>\n        );\n    }\n}\n\nReactDOM.render(<InformationSelector />, document.getElementById('selectInformationTypes'));\n\n\n\n//class FetchCity extends InformationSelector{\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            loading: true,\n//            url: \"http://api.geonames.org/searchJSON?name_equals=\" + props.oldState.city + \"&username=DestinationFinder\",\n//            lat: \"\",\n//            lng: \"\",\n//        };\n////    console.log(this.state);\n////    console.log(props.oldState);\n//    }\n//\n//    async componentDidMount(){\n//        const url = this.state.url;\n//        const response = await fetch(url);\n//        const data = await response.json();\n//        this.setState({lat: data.geonames[1].lat, lng: data.geonames[1].lng, country: data.geonames[1].countryName})\n////        console.log(data.geonames[0]);\n////        console.log(this.state);\n//    }\n//\n//    render(){\n//        return <div>\n//            {<div>{this.state.city}\n//                country: {this.state.country},\n//                lat: {this.state.lat},\n//                lng: {this.state.lng}\n//            </div>}\n//\n//        </div>;\n//    }\n//}\n\n//class FetchTemperature extends FetchCity {\n//    constructor(props) {\n//        super(props);\n//\n//    }\n//\n//    render(){\n//            return <div>\n//                ddfjsnvkjdsnfv\n//            </div>;\n//        }\n//\n//}\n\n"]},"metadata":{},"sourceType":"module"}