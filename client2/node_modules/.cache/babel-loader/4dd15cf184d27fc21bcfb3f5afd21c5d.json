{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport Navbar from './components/navbar.component';\nimport './index.css';\nimport textLogo from './images/DFTextTransparant.png';\nimport calculateDistance from './util';\nconst home = \"De Bilt\";\nvar homeLat = 52.11;\nvar homeLng = 5.18;\nReactDOM.render(React.createElement(Navbar, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}), document.getElementById('navbar'));\nReactDOM.render(React.createElement(\"img\", {\n  src: textLogo,\n  alt: \"nameLogo\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}), document.getElementById('nameLogo'));\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.getTemperature = () => {\n      console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n      const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng + \"&username=destinationFinder\";\n      console.log(url);\n      fetch(url).then(res => res.json()).then(data => {\n        console.log(\"data: \");\n        console.log(data);\n        this.setState({\n          temperature: data.weatherObservation.temperature\n        });\n      }).catch(console.log);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Temperature: \", this.state.temperature, \" degrees\");\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var username = \"destinationFinder\";\n      this.setState({\n        userName: username\n      });\n      var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n      this.componentDidMountCurrentLocation(url);\n      url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n      this.componentDidMountCity(url);\n      console.log(\"lat: \" + this.state.lat);\n      console.log(\"homelat: \" + this.state.homeLat);\n      ReactDOM.render(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.state.city), document.getElementById('cityName'));\n\n      if (this.state.isTemperature) {\n        console.log(\"lat and lng: \" + this.state.lat + this.state.lng);\n        ReactDOM.render(React.createElement(this.getTemperature, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }), document.getElementById('temperatureInfo'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \":\", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, \"\\xA0\"), calculateDistance(this.state.homeLat, this.state.homeLng, this.state.lat, this.state.lng), \" km\"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      } //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n\n    };\n\n    this.state = {\n      currentLocation: home,\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false,\n      lat: \"\",\n      lng: \"\"\n    };\n  }\n\n  componentDidMountCurrentLocation(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: \"\",\n      homeLat: cityData.geonames[0].lat,\n      homeLng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Current city: \", this.state.currentLocation), document.getElementById('currentCity'))));\n  }\n\n  componentDidMountCity(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: cityData.geonames[0].countryName,\n      lat: cityData.geonames[0].lat,\n      lng: cityData.geonames[0].lng\n    }, () => ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Country: \", this.state.country), document.getElementById('countryName')), ReactDOM.render(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Lat: \", this.state.lat, \", Lng: \", this.state.lng), document.getElementById('latlng'))));\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Get Info\"));\n  }\n\n} //ReactDOM.render(<InformationSelector />, document.getElementById('selectInformationTypes'));\n\n\nclass CapitalInit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initDB = () => {\n      const url = \"http://api.geonames.org/countryInfoJSON?formatted=true&username=destinationFinder\";\n      fetch(url).then(res => res.json()).then(data => {\n        let i;\n\n        for (i = 0; i < data.geonames.length; i++) {\n          if (data.geonames[i].capital.length > 0) {\n            const name = data.geonames[i].capital;\n            const countryName = data.geonames[i].countryName;\n            const spokenLanguages = data.geonames[i].languages;\n            let urlCitySpecific = \"http://api.geonames.org/searchJSON?q=\" + name + \"&maxRows=2&username=destinationFinder\";\n            fetch(urlCitySpecific).then(res => res.json()).then(data => {\n              let lat = data.geonames[0].lat;\n              let lng = data.geonames[0].lng;\n              const distance = calculateDistance(homeLat, homeLng, lat, lng);\n              const city = {\n                \"cityName\": name,\n                \"countryName\": countryName,\n                \"spokenLanguages\": spokenLanguages,\n                \"distance\": distance,\n                \"cityLat\": lat,\n                \"cityLng\": lng\n              };\n              axios.post('http://localhost:5000/cities/add', city);\n            });\n          }\n        }\n\n        console.log(\"DB filled with capitals\");\n      }).catch(console.log);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.initDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Initialize Database\"));\n  }\n\n}\n\nexport default CapitalInit;\nReactDOM.render(React.createElement(CapitalInit, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 190\n  },\n  __self: this\n}), document.getElementById('fillDBWithCapitals'));\n\nclass ShowCapitals extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.SortCapitalsDistance = props => {\n      props.msg.sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n      let answer = [];\n      answer[0] = \"City, Distance\";\n      let i;\n\n      for (i = 1; i < props.msg.length; i++) {\n        answer[i] = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, \" \", props.msg[i].cityName, \", \", props.msg[i].distance, \"  \");\n      }\n\n      return answer;\n    };\n\n    this.PrintCapitalsDistance = props => {\n      let answer = [];\n      answer[0] = \"City, Distance\";\n      let i;\n\n      for (i = 1; i < 5; i++) {\n        answer[i] = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, \" \", props.msg[i].cityName, \", \", props.msg[i].distance, \"  \");\n      }\n\n      return answer;\n    };\n\n    this.showCapitals = async () => {\n      const response = await axios.get('http://localhost:5000/cities');\n      console.log(response.data); //ReactDOM.render(<this.PrintCapitalsDistance msg={response.data} />, document.getElementById('showDBInfo'));\n\n      ReactDOM.render(React.createElement(this.SortCapitalsDistance, {\n        msg: response.data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), document.getElementById('showDBInfoSorted'));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.showCapitals,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Show Capitals\"));\n  }\n\n} //ReactDOM.render(<ShowCapitals />, document.getElementById('showDB'));","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/index.js"],"names":["React","ReactDOM","axios","Navbar","textLogo","calculateDistance","home","homeLat","homeLng","render","document","getElementById","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","getTemperature","console","log","state","lat","lng","url","fetch","then","res","json","data","temperature","weatherObservation","catch","onSubmit","preventDefault","username","userName","currentLocation","componentDidMountCurrentLocation","componentDidMountCity","cityData","country","geonames","countryName","name","CapitalInit","initDB","i","length","capital","spokenLanguages","languages","urlCitySpecific","distance","post","ShowCapitals","SortCapitalsDistance","msg","sort","a","b","answer","cityName","PrintCapitalsDistance","showCapitals","response","get"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,iBAAP,MAA8B,QAA9B;AAIA,MAAMC,IAAI,GAAG,SAAb;AACA,IAAIC,OAAO,GAAG,KAAd;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAP,QAAQ,CAACQ,MAAT,CAAgB,oBAAE,MAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA6BC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAA7B;AACAV,QAAQ,CAACQ,MAAT,CAAgB;AAAK,EAAA,GAAG,EAAEL,QAAV;AAAoB,EAAA,GAAG,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAuDM,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAvD;;AAGA,MAAMC,mBAAN,SAAkCZ,KAAK,CAACa,SAAxC,CAAkD;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAanBC,mBAbmB,GAaG,MAAM;AACxB,WAAKC,QAAL,CAAcC,YAAY,KAAK;AAC3BC,QAAAA,aAAa,EAAE,CAACD,YAAY,CAACC;AADF,OAAL,CAA1B;AAGH,KAjBkB;;AAAA,SAkBnBC,gBAlBmB,GAkBA,MAAM;AACrB,WAAKH,QAAL,CAAcC,YAAY,KAAK;AAC3BG,QAAAA,UAAU,EAAE,CAACH,YAAY,CAACG;AADC,OAAL,CAA1B;AAGH,KAtBkB;;AAAA,SAuBnBC,YAvBmB,GAuBHC,CAAD,IAAO;AAClB,YAAMC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA9B;AACA,WAAKT,QAAL,CAAc;AAACU,QAAAA,IAAI,EAAEH;AAAP,OAAd;AACH,KA1BkB;;AAAA,SA8CnBI,cA9CmB,GA8CF,MAAM;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8B,KAAKC,KAAL,CAAWC,GAAzC,GAA+C,KAA/C,GAAuD,KAAKD,KAAL,CAAWE,GAA9E;AACA,YAAMC,GAAG,GAAG,uDAAuD,KAAKH,KAAL,CAAWC,GAAlE,GAAwE,OAAxE,GAAkF,KAAKD,KAAL,CAAWE,GAA7F,GAAoG,6BAAhH;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAC,MAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACVV,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACA,aAAKtB,QAAL,CAAc;AAACuB,UAAAA,WAAW,EAAED,IAAI,CAACE,kBAAL,CAAwBD;AAAtC,SAAd;AACH,OAND,EAOCE,KAPD,CAOOb,OAAO,CAACC,GAPf;AASA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmB,KAAKC,KAAL,CAAWS,WAA9B,aAAP;AACH,KA5DkB;;AAAA,SA8DnBG,QA9DmB,GA8DPpB,CAAD,IAAO;AACdA,MAAAA,CAAC,CAACqB,cAAF;AACA,UAAIC,QAAQ,GAAG,mBAAf;AACA,WAAK5B,QAAL,CAAc;AAAC6B,QAAAA,QAAQ,EAAED;AAAX,OAAd;AACA,UAAIX,GAAG,GAAG,oDAAoD,KAAKH,KAAL,CAAWgB,eAA/D,GAAiF,YAAjF,GAAgGF,QAA1G;AACA,WAAKG,gCAAL,CAAsCd,GAAtC;AAEAA,MAAAA,GAAG,GAAG,oDAAoD,KAAKH,KAAL,CAAWJ,IAA/D,GAAsE,YAAtE,GAAqFkB,QAA3F;AACA,WAAKI,qBAAL,CAA2Bf,GAA3B;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAU,KAAKC,KAAL,CAAWC,GAAjC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAc,KAAKC,KAAL,CAAWxB,OAArC;AACAN,MAAAA,QAAQ,CAACQ,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKsB,KAAL,CAAWJ,IAAf,CAAhB,EAA0CjB,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA1C;;AACA,UAAI,KAAKoB,KAAL,CAAWZ,aAAf,EAA6B;AACzBU,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB,KAAKC,KAAL,CAAWC,GAA7B,GAAmC,KAAKD,KAAL,CAAWE,GAA1D;AACAhC,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,yBAAO,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhB,EAA0CC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAA1C;AACH,OAHD,MAII;AACAV,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,EAAhB,EAAoBC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAApB;AACH;;AACD,UAAI,KAAKoB,KAAL,CAAWV,UAAf,EAA0B;AACtBpB,QAAAA,QAAQ,CAACQ,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAkB,KAAKsB,KAAL,CAAWgB,eAA7B,UAAkD,KAAKhB,KAAL,CAAWJ,IAA7D,OAAmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAnE,EACdtB,iBAAiB,CAAC,KAAK0B,KAAL,CAAWxB,OAAZ,EAAqB,KAAKwB,KAAL,CAAWvB,OAAhC,EACK,KAAKuB,KAAL,CAAWC,GADhB,EACqB,KAAKD,KAAL,CAAWE,GADhC,CADH,QAAhB,EAEiEvB,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAFjE;AAGH,OAJD,MAKK;AACDV,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,EAAhB,EAAoBC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAApB;AACH,OA3Ba,CA4Bd;;AACH,KA3FkB;;AAEf,SAAKoB,KAAL,GAAa;AACTgB,MAAAA,eAAe,EAAEzC,IADR;AAETC,MAAAA,OAAO,EAAE,EAFA;AAGTC,MAAAA,OAAO,EAAE,EAHA;AAITmB,MAAAA,IAAI,EAAE,SAJG;AAKTR,MAAAA,aAAa,EAAE,KALN;AAMTE,MAAAA,UAAU,EAAE,KANH;AAOTW,MAAAA,GAAG,EAAE,EAPI;AAQTC,MAAAA,GAAG,EAAE;AARI,KAAb;AAUH;;AAgBDe,EAAAA,gCAAgC,CAACd,GAAD,EAAM;AAClCC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMc,QAAQ,IAAI,KAAKjC,QAAL,CAAc;AAACkC,MAAAA,OAAO,EAAE,EAAV;AAC5B5C,MAAAA,OAAO,EAAE2C,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBpB,GADF;AACOxB,MAAAA,OAAO,EAAE0C,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBnB;AADrC,KAAd,EACyD,MACvEhC,QAAQ,CAACQ,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkB,KAAKsB,KAAL,CAAWgB,eAA7B,CAAhB,EAAmErC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAnE,CAFc,CAFlB;AAMC;;AACLsC,EAAAA,qBAAqB,CAACf,GAAD,EAAM;AACvBC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMc,QAAQ,IAAI,KAAKjC,QAAL,CAAc;AAACkC,MAAAA,OAAO,EAAED,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBC,WAA/B;AAC5BrB,MAAAA,GAAG,EAAEkB,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBpB,GADE;AACGC,MAAAA,GAAG,EAAEiB,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqBnB;AAD7B,KAAd,EACiD,MAC/DhC,QAAQ,CAACQ,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAa,KAAKsB,KAAL,CAAWoB,OAAxB,CAAhB,EAAsDzC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAtD,CAFc,EAGdV,QAAQ,CAACQ,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAS,KAAKsB,KAAL,CAAWC,GAApB,aAAgC,KAAKD,KAAL,CAAWE,GAA3C,CAAhB,EAAqEvB,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAArE,CAHc,CAFlB;AAOH;;AAgDDF,EAAAA,MAAM,GAAG;AACL,WACC;AAAM,MAAA,QAAQ,EAAE,KAAKkC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAE,KAAKrB,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADL,EAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,OAAO,EAAE,KAAKS,KAAL,CAAWuB,IAHtB;AAIE,MAAA,QAAQ,EAAE,KAAKtC,mBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADA,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,OAAO,EAAE,KAAKe,KAAL,CAAWuB,IAHtB;AAIE,MAAA,QAAQ,EAAE,KAAKlC,gBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CATA,CAFP,EAoBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBL,CADD;AA4BH;;AA1H6C,C,CA6HlD;;;AAEA,MAAMmC,WAAN,SAA0BvD,KAAK,CAACa,SAAhC,CAA0C;AAAA;AAAA;;AAAA,SACtC2C,MADsC,GAC7B,MAAM;AACX,YAAMtB,GAAG,GAAG,mFAAZ;AACAC,MAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACV,YAAIkB,CAAJ;;AACA,aAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAElB,IAAI,CAACa,QAAL,CAAcM,MAA7B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,cAAGlB,IAAI,CAACa,QAAL,CAAcK,CAAd,EAAiBE,OAAjB,CAAyBD,MAAzB,GAAkC,CAArC,EAAuC;AACnC,kBAAMJ,IAAI,GAAGf,IAAI,CAACa,QAAL,CAAcK,CAAd,EAAiBE,OAA9B;AACA,kBAAMN,WAAW,GAAGd,IAAI,CAACa,QAAL,CAAcK,CAAd,EAAiBJ,WAArC;AACA,kBAAMO,eAAe,GAAGrB,IAAI,CAACa,QAAL,CAAcK,CAAd,EAAiBI,SAAzC;AACA,gBAAIC,eAAe,GAAG,0CAA0CR,IAA1C,GAAiD,uCAAvE;AACAnB,YAAAA,KAAK,CAAC2B,eAAD,CAAL,CACC1B,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACV,kBAAIP,GAAG,GAAGO,IAAI,CAACa,QAAL,CAAc,CAAd,EAAiBpB,GAA3B;AACA,kBAAIC,GAAG,GAAGM,IAAI,CAACa,QAAL,CAAc,CAAd,EAAiBnB,GAA3B;AACA,oBAAM8B,QAAQ,GAAG1D,iBAAiB,CAACE,OAAD,EAAUC,OAAV,EAAmBwB,GAAnB,EAAwBC,GAAxB,CAAlC;AACA,oBAAMN,IAAI,GAAG;AACT,4BAAY2B,IADH;AAET,+BAAeD,WAFN;AAGT,mCAAmBO,eAHV;AAIT,4BAAYG,QAJH;AAKT,2BAAW/B,GALF;AAMT,2BAAWC;AANF,eAAb;AAQA/B,cAAAA,KAAK,CAAC8D,IAAN,CAAW,kCAAX,EAA+CrC,IAA/C;AACH,aAfD;AAgBH;AACJ;;AACDE,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH,OA7BD,EA8BCY,KA9BD,CA8BOb,OAAO,CAACC,GA9Bf;AA+BH,KAlCqC;AAAA;;AAoCtCrB,EAAAA,MAAM,GAAG;AACT,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,KAAK+C,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,CADJ;AAIE;;AAzCoC;;AA2C1C,eAAeD,WAAf;AACAtD,QAAQ,CAACQ,MAAT,CAAgB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAiCC,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAAjC;;AAEA,MAAMsD,YAAN,SAA2BjE,KAAK,CAACa,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAEvCqD,oBAFuC,GAEfnD,KAAD,IAAW;AAC9BA,MAAAA,KAAK,CAACoD,GAAN,CAAUC,IAAV,CAAe,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC3B,eAAOD,CAAC,CAACN,QAAF,GAAaO,CAAC,CAACP,QAAtB;AACH,OAFD;AAIA,UAAIQ,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,gBAAZ;AACA,UAAId,CAAJ;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAC1C,KAAK,CAACoD,GAAN,CAAUT,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AAC/Bc,QAAAA,MAAM,CAACd,CAAD,CAAN,GAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAK1C,KAAK,CAACoD,GAAN,CAAUV,CAAV,EAAae,QAAlB,QAA8BzD,KAAK,CAACoD,GAAN,CAAUV,CAAV,EAAaM,QAA3C,OAAZ;AACH;;AAED,aACIQ,MADJ;AAGH,KAjBsC;;AAAA,SAmBvCE,qBAnBuC,GAmBd1D,KAAD,IAAW;AAC/B,UAAIwD,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,gBAAZ;AACA,UAAId,CAAJ;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EAAoB;AAChBc,QAAAA,MAAM,CAACd,CAAD,CAAN,GAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAK1C,KAAK,CAACoD,GAAN,CAAUV,CAAV,EAAae,QAAlB,QAA8BzD,KAAK,CAACoD,GAAN,CAAUV,CAAV,EAAaM,QAA3C,OAAZ;AACH;;AAED,aACIQ,MADJ;AAGH,KA9BsC;;AAAA,SAgCvCG,YAhCuC,GAgCvB,YAAY;AACxB,YAAMC,QAAQ,GAAG,MAAMzE,KAAK,CAAC0E,GAAN,CAAU,8BAAV,CAAvB;AACA/C,MAAAA,OAAO,CAACC,GAAR,CAAY6C,QAAQ,CAACpC,IAArB,EAFwB,CAGxB;;AAEAtC,MAAAA,QAAQ,CAACQ,MAAT,CAAgB,yBAAM,oBAAN;AAA2B,QAAA,GAAG,EAAEkE,QAAQ,CAACpC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAmE7B,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAAnE;AACH,KAtCsC;AAAA;;AAwCvCF,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,KAAKiE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,CADJ;AAKH;;AA9CsC,C,CAgD3C","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport Navbar from './components/navbar.component'\nimport './index.css'\nimport textLogo from './images/DFTextTransparant.png'\nimport calculateDistance from './util'\n\n\n\nconst home = \"De Bilt\";\nvar homeLat = 52.11;\nvar homeLng = 5.18;\n\nReactDOM.render(< Navbar />, document.getElementById('navbar'));\nReactDOM.render(<img src={textLogo} alt=\"nameLogo\" />, document.getElementById('nameLogo'));\n\n\nclass InformationSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentLocation: home,\n            homeLat: \"\",\n            homeLng: \"\",\n            city: \"De Bilt\",\n            isTemperature: false,\n            isDistance: false,\n            lat: \"\",\n            lng: \"\"\n        };\n    }\n    onChangeTemperature = () => {\n        this.setState(initialState => ({\n            isTemperature: !initialState.isTemperature,\n        }));\n    }\n    onChangeDistance = () => {\n        this.setState(initialState => ({\n            isDistance: !initialState.isDistance,\n        }));\n    }\n    onChangeCity = (e) => {\n        const citySelected = e.target.value;\n        this.setState({city: citySelected});\n    }\n\n    componentDidMountCurrentLocation(url) {\n        fetch(url)\n        .then(res => res.json())\n        .then(cityData => this.setState({country: \"\",\n            homeLat: cityData.geonames[0].lat, homeLng: cityData.geonames[0].lng}, () =>\n            ReactDOM.render(<p>Current city: {this.state.currentLocation}</p>, document.getElementById('currentCity')),\n        ));\n        }\n    componentDidMountCity(url) {\n        fetch(url)\n        .then(res => res.json())\n        .then(cityData => this.setState({country: cityData.geonames[0].countryName,\n            lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\n            ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')),\n            ReactDOM.render(<p>Lat: {this.state.lat}, Lng: {this.state.lng}</p>, document.getElementById('latlng'))\n        ));\n    }\n\n    getTemperature = () => {\n        console.log(\"lat and lng in function: \" + this.state.lat + \" + \" + this.state.lng);\n        const url = \"http://api.geonames.org/findNearByWeatherJSON?lat=\" + this.state.lat + \"&lng=\" + this.state.lng +  \"&username=destinationFinder\";\n        console.log(url);\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            console.log(\"data: \");\n            console.log(data);\n            this.setState({temperature: data.weatherObservation.temperature, });\n        })\n        .catch(console.log);\n\n        return <div>Temperature: {this.state.temperature} degrees</div>;\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        var username = \"destinationFinder\"\n        this.setState({userName: username});\n        var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n        this.componentDidMountCurrentLocation(url);\n\n        url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n        this.componentDidMountCity(url);\n\n        console.log(\"lat: \" + this.state.lat);\n        console.log(\"homelat: \" + this.state.homeLat);\n        ReactDOM.render(<p>{this.state.city}</p>, document.getElementById('cityName'));\n        if (this.state.isTemperature){\n            console.log(\"lat and lng: \" + this.state.lat + this.state.lng);\n            ReactDOM.render(< this.getTemperature />, document.getElementById('temperatureInfo'));\n        }\n        else{\n            ReactDOM.render(\"\", document.getElementById('temperature'));\n        }\n        if (this.state.isDistance){\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}:<span>&nbsp;</span>\n             {calculateDistance(this.state.homeLat, this.state.homeLng,\n                                    this.state.lat, this.state.lng)} km</p>, document.getElementById('distance'));\n        }\n        else {\n            ReactDOM.render(\"\", document.getElementById('distance'));\n        }\n        //ReactDOM.render(<FetchCity oldState={this.state} />, document.getElementById('temperatureInfo'));\n    }\n    render() {\n        return (\n         <form onSubmit={this.onSubmit}>\n              <input type='text' onChange={this.onChangeCity} />\n                <p>\n                <label>\n                  Temperature\n                  <input\n                    name=\"Temperature\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeTemperature}/>\n                </label>\n                <label>\n                  Distance\n                  <input\n                    name=\"Distance\"\n                    type=\"checkbox\"\n                    checked={this.state.name}\n                    onChange={this.onChangeDistance}/>\n                </label>\n              </p>\n              <button>\n                Get Info\n              </button>\n          </form>\n        );\n\n\n    }\n}\n\n//ReactDOM.render(<InformationSelector />, document.getElementById('selectInformationTypes'));\n\nclass CapitalInit extends React.Component {\n    initDB = () => {\n        const url = \"http://api.geonames.org/countryInfoJSON?formatted=true&username=destinationFinder\";\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            let i;\n            for (i = 0; i< data.geonames.length;i++){\n                if(data.geonames[i].capital.length > 0){\n                    const name = data.geonames[i].capital;\n                    const countryName = data.geonames[i].countryName;\n                    const spokenLanguages = data.geonames[i].languages;\n                    let urlCitySpecific = \"http://api.geonames.org/searchJSON?q=\" + name + \"&maxRows=2&username=destinationFinder\";\n                    fetch(urlCitySpecific)\n                    .then(res => res.json())\n                    .then(data => {\n                        let lat = data.geonames[0].lat;\n                        let lng = data.geonames[0].lng;\n                        const distance = calculateDistance(homeLat, homeLng, lat, lng);\n                        const city = {\n                            \"cityName\": name,\n                            \"countryName\": countryName,\n                            \"spokenLanguages\": spokenLanguages,\n                            \"distance\": distance,\n                            \"cityLat\": lat,\n                            \"cityLng\": lng,\n                        }\n                        axios.post('http://localhost:5000/cities/add', city)\n                    })\n                }\n            }\n            console.log(\"DB filled with capitals\");\n        })\n        .catch(console.log);\n    }\n\n    render() {\n    return(\n        <div>\n            <button onClick={this.initDB} >Initialize Database</button>\n        </div>\n    )}\n}\nexport default CapitalInit\nReactDOM.render(<CapitalInit />, document.getElementById('fillDBWithCapitals'));\n\nclass ShowCapitals extends React.Component {\n\n    SortCapitalsDistance = (props) => {\n        props.msg.sort(function (a, b) {\n            return a.distance - b.distance;\n        })\n\n        let answer = [];\n        answer[0] = \"City, Distance\";\n        let i;\n        for (i = 1; i<props.msg.length;i++){\n            answer[i] = <p> {props.msg[i].cityName}, {props.msg[i].distance}  </p>\n        }\n\n        return (\n            answer\n        )\n    }\n\n    PrintCapitalsDistance = (props) => {\n        let answer = [];\n        answer[0] = \"City, Distance\";\n        let i;\n        for (i = 1; i<5;i++){\n            answer[i] = <p> {props.msg[i].cityName}, {props.msg[i].distance}  </p>\n        }\n\n        return (\n            answer\n        )\n    }\n\n    showCapitals = (async () => {\n        const response = await axios.get('http://localhost:5000/cities')\n        console.log(response.data)\n        //ReactDOM.render(<this.PrintCapitalsDistance msg={response.data} />, document.getElementById('showDBInfo'));\n\n        ReactDOM.render(<this.SortCapitalsDistance msg={response.data} />, document.getElementById('showDBInfoSorted'));\n    })\n\n    render() {\n        return(\n            <div>\n                <button onClick={this.showCapitals} >Show Capitals</button>\n            </div>\n        )\n    }\n}\n//ReactDOM.render(<ShowCapitals />, document.getElementById('showDB'));\n\n"]},"metadata":{},"sourceType":"module"}