{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asimatovic\\\\GitProjecten\\\\destinationFinder\\\\client\\\\src\\\\SearchByCity.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport calculateDistance from './util';\nimport axios from 'axios';\nconst home = \"De Bilt\";\nvar cityFound = true;\n\nclass InformationSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeTemperature = () => {\n      this.setState(initialState => ({\n        isTemperature: !initialState.isTemperature\n      }));\n    };\n\n    this.onChangeDistance = () => {\n      this.setState(initialState => ({\n        isDistance: !initialState.isDistance\n      }));\n    };\n\n    this.onChangeCity = e => {\n      const citySelected = e.target.value;\n      this.setState({\n        city: citySelected\n      });\n    };\n\n    this.getTemperature = () => {\n      const url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + this.state.city + \"&APPID=840e44ccd3376f040093e83e5be8f34f\";\n      fetch(url).then(res => res.json()).then(data => {\n        const temp = Number(data.main.temp) - 273.15;\n        this.setState({\n          temperature: temp.toFixed(0)\n        });\n      }).catch(console.log);\n      axios.post('http://localhost:3000/temperature/getTemperature', {\n        cityName: this.state.city\n      }).then(res => {\n        console.log(res);\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, \"Temperature: res degrees Celcius\");\n      });\n    };\n\n    this.componentDidMountInfoTypes = () => {\n      if (this.state.isTemperature) {\n        ReactDOM.render(React.createElement(this.getTemperature, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }), document.getElementById('temperature'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n      }\n\n      if (this.state.isDistance) {\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \"Distance from \", this.state.currentLocation, \" to \", this.state.city, \":\", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \"\\xA0\"), calculateDistance(this.state.homeLat, this.state.homeLng, this.state.lat, this.state.lng), \" km\"), document.getElementById('distance'));\n      } else {\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      }\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var username = \"destinationFinder\";\n      this.setState({\n        userName: username\n      });\n      var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\n      this.componentDidMountCurrentLocation(url);\n      url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\n      this.componentDidMountCity(url);\n\n      if (cityFound === true) {\n        this.componentDidMountInfoTypes();\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"City: \", this.state.city), document.getElementById('cityName'));\n      }\n    };\n\n    this.state = {\n      currentLocation: home,\n      homeLat: \"\",\n      homeLng: \"\",\n      city: \"De Bilt\",\n      isTemperature: false,\n      isDistance: false,\n      lat: \"\",\n      lng: \"\"\n    };\n  }\n\n  componentDidMountCurrentLocation(url) {\n    fetch(url).then(res => res.json()).then(cityData => this.setState({\n      country: \"\",\n      homeLat: cityData.geonames[0].lat,\n      homeLng: cityData.geonames[0].lng\n    }));\n  }\n\n  componentDidMountCity(url) {\n    fetch(url).then(res => res.json()).then(cityData => {\n      if (cityData.geonames.length > 0) {\n        cityFound = true;\n        this.setState({\n          country: cityData.geonames[0].countryName,\n          lat: cityData.geonames[0].lat,\n          lng: cityData.geonames[0].lng\n        }, () => ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"Country: \", this.state.country), document.getElementById('countryName')));\n      } else {\n        cityFound = false;\n        ReactDOM.render(React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, \"City not found\"), document.getElementById('cityName'));\n        ReactDOM.render(\"\", document.getElementById('countryName'));\n        ReactDOM.render(\"\", document.getElementById('temperature'));\n        ReactDOM.render(\"\", document.getElementById('distance'));\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"formCitySearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Choose a city and the information you wish to see\"), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onChangeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Temperature\", React.createElement(\"input\", {\n      name: \"Temperature\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Distance\", React.createElement(\"input\", {\n      name: \"Distance\",\n      type: \"checkbox\",\n      checked: this.state.name,\n      onChange: this.onChangeDistance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Get Info\")), React.createElement(\"div\", {\n      id: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"searchInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"SearchByCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"currentCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"selectInformationTypes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"cityName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"countryName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"latlng\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"temperature\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"temperatureInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default InformationSelector;","map":{"version":3,"sources":["C:/Users/asimatovic/GitProjecten/destinationFinder/client/src/SearchByCity.js"],"names":["React","ReactDOM","calculateDistance","axios","home","cityFound","InformationSelector","Component","constructor","props","onChangeTemperature","setState","initialState","isTemperature","onChangeDistance","isDistance","onChangeCity","e","citySelected","target","value","city","getTemperature","url","state","fetch","then","res","json","data","temp","Number","main","temperature","toFixed","catch","console","log","post","cityName","componentDidMountInfoTypes","render","document","getElementById","currentLocation","homeLat","homeLng","lat","lng","onSubmit","preventDefault","username","userName","componentDidMountCurrentLocation","componentDidMountCity","cityData","country","geonames","length","countryName","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport calculateDistance from './util'\r\nimport axios from 'axios';\r\n\r\n\r\nconst home = \"De Bilt\";\r\nvar cityFound = true;\r\n\r\nclass InformationSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentLocation: home,\r\n            homeLat: \"\",\r\n            homeLng: \"\",\r\n            city: \"De Bilt\",\r\n            isTemperature: false,\r\n            isDistance: false,\r\n            lat: \"\",\r\n            lng: \"\"\r\n        };\r\n    }\r\n    onChangeTemperature = () => {\r\n        this.setState(initialState => ({\r\n            isTemperature: !initialState.isTemperature,\r\n        }));\r\n    }\r\n    onChangeDistance = () => {\r\n        this.setState(initialState => ({\r\n            isDistance: !initialState.isDistance,\r\n        }));\r\n    }\r\n    onChangeCity = (e) => {\r\n        const citySelected = e.target.value;\r\n        this.setState({city: citySelected});\r\n    }\r\n\r\n    componentDidMountCurrentLocation(url) {\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(cityData => this.setState({country: \"\",\r\n            homeLat: cityData.geonames[0].lat, homeLng: cityData.geonames[0].lng},\r\n        ));\r\n    }\r\n\r\n    componentDidMountCity(url) {\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(cityData => {\r\n            if(cityData.geonames.length>0){\r\n                cityFound = true;\r\n                this.setState({country: cityData.geonames[0].countryName,\r\n                lat: cityData.geonames[0].lat, lng: cityData.geonames[0].lng}, () =>\r\n                ReactDOM.render(<p>Country: {this.state.country}</p>, document.getElementById('countryName')),\r\n                )\r\n            }\r\n            else{\r\n                cityFound = false;\r\n                ReactDOM.render(<p>City not found</p>, document.getElementById('cityName'));\r\n                ReactDOM.render(\"\", document.getElementById('countryName'));\r\n                ReactDOM.render(\"\", document.getElementById('temperature'));\r\n                ReactDOM.render(\"\", document.getElementById('distance'));\r\n            }\r\n        });\r\n    }\r\n\r\n    getTemperature = () => {\r\n        const url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + this.state.city + \"&APPID=840e44ccd3376f040093e83e5be8f34f\";\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            const temp = Number(data.main.temp) - 273.15;\r\n            this.setState({temperature: temp.toFixed(0) });\r\n        })\r\n        .catch(console.log);\r\n\r\n\r\n\r\n        axios.post('http://localhost:3000/temperature/getTemperature', {\r\n                    cityName: this.state.city\r\n                })\r\n                .then((res) => {\r\n                    console.log(res);\r\n                    return <div>Temperature: res degrees Celcius</div>;\r\n                })\r\n    }\r\n\r\n    componentDidMountInfoTypes = () => {\r\n        if (this.state.isTemperature){\r\n            ReactDOM.render(< this.getTemperature />, document.getElementById('temperature'));\r\n        }\r\n        else{\r\n            ReactDOM.render(\"\", document.getElementById('temperature'));\r\n        }\r\n        if (this.state.isDistance){\r\n            ReactDOM.render(<p>Distance from {this.state.currentLocation} to {this.state.city}:<span>&nbsp;</span>\r\n             {calculateDistance(this.state.homeLat, this.state.homeLng,\r\n                                    this.state.lat, this.state.lng)} km</p>, document.getElementById('distance'));\r\n        }\r\n        else {\r\n            ReactDOM.render(\"\", document.getElementById('distance'));\r\n        }\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        var username = \"destinationFinder\"\r\n        this.setState({userName: username});\r\n        var url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.currentLocation + \"&username=\" + username;\r\n        this.componentDidMountCurrentLocation(url);\r\n        url = \"http://api.geonames.org/searchJSON?name_equals=\" + this.state.city + \"&username=\" + username;\r\n        this.componentDidMountCity(url);\r\n        if(cityFound === true) {\r\n            this.componentDidMountInfoTypes();\r\n            ReactDOM.render(<p>City: {this.state.city}</p>, document.getElementById('cityName'));\r\n\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n        <div id=\"formCitySearch\">\r\n         <form onSubmit={this.onSubmit}>\r\n              <h1>Choose a city and the information you wish to see</h1>\r\n              <input type='text' onChange={this.onChangeCity} />\r\n                <p>\r\n                <label>\r\n                  Temperature\r\n                  <input\r\n                    name=\"Temperature\"\r\n                    type=\"checkbox\"\r\n                    checked={this.state.name}\r\n                    onChange={this.onChangeTemperature}/>\r\n                </label>\r\n                <label>\r\n                  Distance\r\n                  <input\r\n                    name=\"Distance\"\r\n                    type=\"checkbox\"\r\n                    checked={this.state.name}\r\n                    onChange={this.onChangeDistance}/>\r\n                </label>\r\n              </p>\r\n              <button>\r\n                Get Info\r\n              </button>\r\n\r\n          </form>\r\n          <div id=\"wrapper\">\r\n              <div id=\"searchInfo\"></div>\r\n              <div id=\"SearchByCity\">\r\n                <div id=\"currentCity\"></div>\r\n                <div id=\"selectInformationTypes\"></div>\r\n                <div id=\"cityName\"></div>\r\n                <div id=\"countryName\"></div>\r\n                <div id=\"latlng\"></div>\r\n                <div id=\"temperature\"></div>\r\n                <div id=\"distance\"></div>\r\n                <div id=\"temperatureInfo\"></div>\r\n              </div>\r\n          </div>\r\n       </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default InformationSelector"]},"metadata":{},"sourceType":"module"}